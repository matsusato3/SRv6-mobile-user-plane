<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY rfc5213 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5213.xml">
  <!ENTITY I-D.ietf-spring-segment-routing SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-spring-segment-routing.xml">
  <!ENTITY I-D.filsfils-spring-srv6-network-programming SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.filsfils-spring-srv6-network-programming.xml">
  <!ENTITY I-D.hegdeppsenak-isis-sr-flex-algo SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.hegdeppsenak-isis-sr-flex-algo.xml">
  <!ENTITY I-D.ietf-dmm-fpc-cpdp SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dmm-fpc-cpdp.xml">
  <!ENTITY I-D.gundavelli-dmm-mfa SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.gundavelli-dmm-mfa.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<rfc category="std" docName="draft-ietf-dmm-srv6-mobile-uplane-02" ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc="yes" ?>

  <?rfc symrefs="yes" ?>

  <?rfc sortrefs="yes"?>
  <?rfc compact="yes" ?>
  <?rfc subcompact="yes" ?>
  <?rfc iprnotified="no" ?>

  <?rfc strict="yes" ?>

  <front>
    <title abbrev="SRv6-mobile-uplane">Segment Routing IPv6 for Mobile User Plane</title>

     <author fullname="Satoru Matsushima" initials="S." surname="Matsushima">
      <organization abbrev="SoftBank">SoftBank</organization>

      <address>
        <postal>
          <street></street>
          <city>Tokyo</city>
          <region></region>
          <code></code>
          <country>Japan</country>
        </postal>
        <email>satoru.matsushima@g.softbank.co.jp</email>
      </address>
    </author>
    
    <author fullname="Clarence Filsfils" initials="C." surname="Filsfils">
      <organization abbrev="Cisco Systems, Inc.">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <region></region>
          <code></code>
          <country>Belgium</country>
        </postal>
        <email>cf@cisco.com</email>
      </address>
    </author>

    <author fullname="Miya Kohno" initials="M." surname="Kohno">
      <organization abbrev="Cisco Systems, Inc.">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <region></region>
          <code></code>
          <country>Japan</country>
        </postal>
        <email>mkohno@cisco.com</email>
      </address>
    </author>

    <author fullname="Pablo Camarillo Garvia" initials="P." surname="Camarillo">
      <organization abbrev="Cisco Systems, Inc.">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <region></region>
          <code></code>
          <country>Spain</country>
        </postal>
        <email>pcamaril@cisco.com</email>
      </address>
    </author>
    
    <author fullname="Daniel Voyer" initials="D." surname="Voyer">
      <organization abbrev="Bell Canada">Bell Canada</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <region></region>
          <code></code>
          <country>Canada</country>
        </postal>
        <email>daniel.voyer@bell.ca</email>
      </address>
    </author>

    <author fullname="Charles E. Perkins" initials="C.E." surname="Perkins">
       <organization abbrev="Futurewei">Futurewei Inc. </organization>
       <address>
         <postal>
           <street>2330 Central Expressway</street>
           <city>Santa Clara</city>
           <code>95050</code>
           <region>CA</region>
           <country>USA</country>
         </postal>
         <phone>+1-408-330-4586</phone>
         <email>charliep@computer.org</email>
       </address>
    </author>

    <date year="2018" />
    <workgroup>DMM Working Group</workgroup>

    <abstract>
      <t>This document discusses the applicability of SRv6 (Segment Routing
      IPv6) to user-plane of mobile networks. The source routing capability 
      and the network programming nature of SRv6, accomplish mobile
      user-plane functions in a simple manner. The statelessness and 
      the ability to control underlying layer will be even more beneficial 
      to the mobile user-plane, in terms of providing flexibility and SLA 
      control for various applications. It also simplifies the network 
      architecture by eliminating the necessity of tunnels, such as 
      <xref target="TS.29281">GTP-U</xref>, PMIP <xref target="RFC5213"/>, 
      Mac-in-Mac, MPLS, and so on. In addition, Segment Routing provides 
      an enhanced method for network slicing, which is briefly introduced 
      by this document.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
        <t>In mobile networks, mobility management systems provide
        connectivity while mobile nodes move around. While the
        control-plane of the system signals movements of a mobile node,
        user-plane establishes tunnel between the mobile node and anchor
        node over IP based backhaul and core networks. </t>

        <t>This document discusses the applicability of SRv6 (Segment
        Routing IPv6) to those mobile networks. SRv6 provides source
        routing to networks where operators can explicitly indicate a route
        for the packets from and to the mobile node. SRv6 endpoint nodes
        perform the roles of anchor of mobile user-plane. </t>

    </section>

    <section title="Conventions and Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119"></xref>.</t>
        
        <t>SRH is the abbreviation for the Segment Routing Header. We assume that the SRH may be present multiple times inside each packet.</t>
        <t>NH is the abbreviation of the IPv6 next-header field.</t>
        <t>NH=SRH means that the next-header field is 43 with routing type 4.</t> 
        <t>When there are multiple SRHs, they must follow each other: the next-header field of all SRH, except the last one, must be SRH.</t>
        <t>The effective next-header (ENH) is the next-header field of the IP header when no SRH is present, or is the next-header field of the last SRH.</t>
        <t>In this version of the document, we assume that there is no other extension header than the SRH. This will be lifted in future versions of the document.</t>
        <t>SID: A Segment Identifier which represents a specific segment in segment routing domain. The SID type used in this document is IPv6 address (also referenced as SRv6 Segment or SRv6 SID).</t>
        <t>A SID list is represented as &lt;S1, S2, S3&gt; where S1 is the first SID to visit, S2 is the second SID to visit and S3 is the last SID to visit along the SR path.</t>
        <t>(SA,DA) (S3, S2, S1; SL) represents an IPv6 packet with:<list style="symbols">
          <t>IPv6 header with source and destination addresses respectively SA and DA and next-header is SRH</t>
          <t>SRH with SID list &lt;S1, S2, S3&gt; with SegmentsLeft = SL</t>
          <t>Note the difference between the &lt;&gt; and () symbols: &lt;S1, S2, S3&gt; represents a SID list where S1 is the first SID and S3 is the last SID. (S3, S2, S1; SL) represents the same SID list but encoded in the SRH format where the rightmost SID in the SRH is the first SID and the leftmost SID in the SRH is the last SID. When referring to an SR policy in a high-level use-case, it is simpler to use the &lt;S1, S2, S3&gt; notation. When referring to an illustration of the detailed behavior, the (S3, S2, S1; SL) notation is more convenient.</t>
          <t>The payload of the packet is omitted.</t>
        </list></t>
        <t>SRH[SL] represents the SID pointed by the SL field in the first SRH. In our example, SRH[2] represents S1, SRH[1] represents S2 and SRH[0] represents S3.</t>
        <t>FIB is the abbreviation for the forwarding table. A FIB lookup is a lookup in the forwarding table.
          When a packet is intercepted on a wire, it is possible that SRH[SL] is different from the DA.</t>
    </section>

    <section anchor="motivations" title="Motivation">
        <t>Every day mobility networks are getting more challenging to operate: on one hand, traffic is constantly growing, and latency requirements are more strict; on the other-hand, there are new use-cases like NFV that are also challenging network management.</t>
        <t>Problem comes from the fact that the current architecture of mobile networks is agnostic to the underlying transport. Indeed, it rigidly fragments the user-plane into radio access, core and service networks and connects them by tunneling techniques through the user-plane roles such as access and anchor nodes. Such agnosticism and rigidness make it difficult for the operator to optimize and operate the data-path.</t>

        <t>While the mobile network industry has been trying to solve those problems, applications have shifted to use IPv6, and network operators have started adopting IPv6 as their IP transport as well.  SRv6, the IPv6 instantiation of Segment Routing <xref target="I-D.ietf-spring-segment-routing"/>, integrates both the application data-path and the underlying transport layer into one single protocol, allowing operators to optimize the network in a simplified manner and removing state from the network.</t>
        <t>Further on, SRv6 introduces the notion of network-programming <xref target="I-D.filsfils-spring-srv6-network-programming"/>, that applied to mobility fulfils the user-plane functions of mobility management. SRv6 takes advantage of underlying transport awareness and flexibility to deploy mobility user-plane functions in an optimized manner. Those are the motivations to adopt SRv6 for mobile user-plane.</t>
    </section>

    <section anchor="scenarios" title="Reference Architecture">
        <t>This section describes a reference architecture and possible deployment
        scenarios.</t>
        
        <t><xref target="fig_ref-arch"/> shows a reference architecture, based
        on 5G packet core architecture <xref target="TS.23501"/>.</t>
        <t>Please note that all the user-plane described in this document does not depend on any specific architecture. This architecture is just used as a reference based on the latest 3GPP standards at the time of writing this draft. Other type of architectures can be seen in <xref target="I-D.gundavelli-dmm-mfa"/> and [WHITEPAPER-5G-UP].</t>
        <figure anchor="fig_ref-arch" title="Reference Architecture">
          <artwork align="center"><![CDATA[
                               +-----+
                               | AMF |
                               +-----+
                              /    | [N11]
                       [N2]  /  +-----+
                     +------/   | SMF |
                    /           +-----+
                   /              / \  
                  /              /   \  [N4]
                 /              /     \                    ________
                /              /       \                  /        \
+--+      +-----+ [N3] +------+  [N9]  +------+  [N6]    /          \
|UE|------| gNB |------| UPF1 |--------| UPF2 |--------- \    DN    /
+--+      +-----+      +------+        +------+           \________/
            ]]></artwork>
        </figure>
        <t>
          <list style="symbols">
            <t>UE  : User Equipment </t>
            <t>gNB : gNodeB </t>
            <t>UPF : User Plane Function
              <list style="symbols">
                <t>UPF1: Interfaces N3 and N9</t>
                <t>UPF2: Interfaces N9 and N6</t>
                <t>Note: For simplicity we don't depict a UPF that is only connected to N9 interfaces, although the techniques described in this document are also valid in such case.</t>
              </list>
            </t>
            <t>SMF : Session Management Function </t>
            <t>AMF : Access and Mobility Management Function </t>
            <t>DN  : Data Network e.g. operator services, Internet access </t>
          </list>
        </t>
        
        <t>A session from an UE gets assigned to an UPF. Sometimes more than 
        one UPF may be used for providing a certain kind of richer service 
        functions. UE gets its IP address from the DHCP block of its UPF. 
        The UPF advertises the IP address block towards the Internet ensuring 
        that return traffic is routed to the right UPF. </t>
    </section>

    <section anchor="uplane-functions" title="User-plane behaviors">
      <t>This section describes the mobile user-plane behaviors using SRv6.</t>
      
      <t>In order to simplify the SRv6 adoption, we present two different &quot;modes&quot; that vary with respect the SRv6 SID allocation. The first one is the "Traditional mode", which inherits the traditional mobile user-plane. In this mode there is no change to mobility networks architecture, except for the pure replacement of <xref target="TS.29281">GTP-U</xref> for SRv6.</t>
      <t>The second mode is the "Enhanced mode", which aggregates the mobile sessions and allocates SID on a per policy basis. The benefit of the latter is that the SR policy contains SIDs for Traffic Engineering and VNFs. Both of these modes assume both the gNB and UPFs are SR-aware (N3 and N9 interfaces are SRv6).</t>

      <t>Additionally, we introduce a new "Enhanced mode with unchanged gNB GTP behavior". This mode consists of two mechanisms for interworking with legacy access networks -interface N3 unmodified-. One of these mechanism is designed to interwork with legacy gNBs using GTP/IPv4. The second method is designed to interwork with legacy gNBs using GTP/IPv6.</t>

      <t>This section makes reference to already existing SRv6 functions defined in <xref target="I-D.filsfils-spring-srv6-network-programming"/> as well as new SRv6 functions designed for the mobile userplane. The new SRv6 functions are detailed in the <xref target="srv6_functions"/>.</t>
    
      <section anchor="traditional_mode" title="Traditional mode (formerly Basic mode)">
        <t>In the traditional mode, we assume that mobile user-plane functions are the same as existing ones except the use of SRv6 as the data plane instead of GTP-U. No impact to the rest of mobile system should be expected.</t>

        <t>In the traditional mobile network, an UE session is mapped 1-for-1 with a specific GTP tunnel (TEID). This 1-for-1 mapping is replicated here to replace the GTP encaps with the SRv6 encaps, while not changing anything else.</t>

        <t>This mode minimizes the changes required to the entire system and it is a good starting point for forming the common basis. Note that in this mode the TEID is embedded in each SID.</t>

        <t>Our reference topology is shown in <xref target="fig_traditional"/>. In this mode we assume that the gNB and the UPFs are SR-aware.</t>

        <figure anchor="fig_traditional" title="Traditional mode - Reference topology">
          <artwork align="center"><![CDATA[    
                                                           ________
                  SRv6           SRv6                     /        \
+--+      +-----+ [N3] +------+  [N9]  +------+  [N6]    /          \
|UE|------| gNB |------| UPF1 |--------| UPF2 |--------- \    DN    /
+--+      +-----+      +------+        +------+           \________/
         SRv6 node     SRv6 node       SRv6 node
                ]]></artwork>
        </figure>

        <section anchor="traditional_up" title="Packet flow - Uplink">
          <t>The uplink packet flow is the following:</t>
          <figure>
            <artwork align="center"><![CDATA[
UE_out  : (A,Z)
gNB_out : (gNB, U1::1) (A,Z)     -> T.Encaps.Reduced <U1::1>
UPF1_out: (gNB, U2::1) (A,Z)     -> End.MAP
UPF2_out: (A,Z)                  -> End.DT4 or End.DT6
            ]]></artwork>
          </figure>

          <t>The UE packet arrives to the gNB. The gNB performs a T.Encaps.Reduced operations. Since there is only one SID, there is no need to push an SRH. gNB only adds an outer IPv6 header with IPv6 DA U1::1. U1::1 represents an anchoring SID specific for that session at UPF1. The SID U1::1 is retrieved through the existing control plane (N2 interface).</t>

          <t>Upon packet arrival on UPF1, the SID U1::1 is a local End.MAP function. This function maps the SID with the next anchoring point and replaces U1::1 by U2::1, that belongs to the next anchoring point.</t>

          <t>Upon packet arrival on UPF2, the SID U2::1 corresponds to an End.DT function. UPF2 decapsulates the packet, performs a lookup in a specific table and forwards the packet towards the data network.</t>

        </section>

        <section anchor="traditional_dn" title="Packet flow - Downlink">
          <t>The downlink packet flow is the following:</t>
          <figure>
            <artwork align="center"><![CDATA[
UPF2_in : (Z,A)
UPF2_out: (U2::, U1::1) (Z,A)    -> T.Encaps.Reduced <U1::1>
UPF1_out: (U2::, gNB::1) (Z,A)      -> End.MAP
gNB_out : (Z,A)                  -> End.DX4 or End.DX6
            ]]></artwork>
          </figure>

          <t>When the packet arrives to the UPF2, the UPF2 will map that particular flow into a UE session. This UE session is associated with the policy &lt;U1::1&gt;. The UPF2 performs a T.Encaps.Reduced operation, encapsulating the packet into a new IPv6 header with no SRH since there is only one SID.</t>

          <t>Upon packet arrival on UPF1, the SID U1::1 is a local End.MAP function. This function maps the SID with the next anchoring point and replaces U1::1 by gNB::1, that belongs to the next anchoring point.</t>

          <t>Upon packet arrival on gNB, the SID gNB::1 corresponds to an End.DX4/End.DX6 function. The gNB will decapsulates the packet, removing the IPv6 header and all it's extensions headers and will forward the traffic towards the UE.</t>
        </section>

        <section title="IPv6 user-traffic">
          <t>For IPv6 user-traffic it is RECOMMENDED to perform encapsulation. However based on local policy, a service provider MAY choose to do SRH insertion. The main benefit is a lower overhead. In such case, the functions used are T.Insert.Red at gNB, End.MAP at UPF1 and End.T at UPF2 on Uplink, T.Insert.Red at UPF2, End.MAP at UPF1 and End.X at gNB on Downlink.</t>
        </section>
      </section>
      
      <section anchor="enhanced_mode" title="Enhanced Mode (formerly Aggregate mode)">
        <t>This mode improves the scalability. In addition, it provides key improvements in terms of traffic steering and service chaining, thanks to the use of an SR policy of multiple SIDs, instead of single one in the Traditional mode.</t>

        <t>Key points:
        <list style='symbols'>
          <t>Several UE share the same SR Policy (and it's composing SID)</t>
          <t>The SR policy MAY include SIDs for traffic engineering and service chaining on top of the UPF anchor.</t>
        </list></t>
        <t>The gNB control-plane (N2 interface) is unchanged, specifically a single IPv6 address is given to the gNB.
        <list style='symbols'>        
          <t>The gNB MAY resolve the IP address into a SID list through a mechanism like PCEP, DNS-lookup, small augment for LISP control-plane, etc.</t>
        </list></t>

        <t>Our reference topology is shown in <xref target="fig_enhanced"/>. In this mode we assume that the gNB and the UPF are SR-aware. We also assume that we have two services segments, S1 and C1. S1 represents a VNF in the network, and C1 represents a constraint path on a router over which we are going to perform Traffic Engineering. Note that S1 and C1 belong to the underlay and don't have an N4 interface. For this reason we don't consider them UPFs.</t>

        <figure anchor="fig_enhanced" title="Enhanced mode - Reference topology">
          <artwork align="center"><![CDATA[    
                                 +----+  SRv6               _______
                 SRv6          --| C1 |--[N3]              /       \
+--+    +-----+  [N3]         /  +----+  \  +------+ [N6] /         \
|UE|----| gNB |--       SRv6 /    SRv6    --| UPF2 |------\   DN    /
+--+    +-----+  \      [N3]/      TE       +------+       \_______/
       SRv6 node  \ +----+ /               SRv6 node
                   -| S1 |-
                    +----+
                   SRv6 node
                     NFV
                ]]></artwork>
        </figure>
               
        <section anchor="enhanced_uplink" title="Packet flow - Uplink">
          <t>The uplink packet flow is the following:</t>

          <figure>
            <artwork align="center"><![CDATA[
UE_out  : (A,Z)
gNB_out : (gNB, S1)(U2::1, C1; SL=2)(A,Z)-> T.Encaps.Red<S1,C1,U2::1>
S1_out  : (gNB, C1)(U2::1, C1; SL=1 (A,Z)
C1_out  : (gNB, U2::1)(A,Z)              -> PSP
UPF2_out: (A,Z)                          -> End.DT4 or End.DT6
            ]]></artwork>
          </figure>
          <t>UE sends its packet (A,Z) on a specific bearer session to its gNB. gNB's CP associates that session from the UE(A) with the IPv6 address B and GTP TEID T. gNB's CP does a lookup on B (by reverseDNS, LISP, etc.) to find the related SID list &lt;S1, C1, U2::1&gt;.</t>
          <t>Once the packet leaves the gNB, it already contains all the segments of the SR policy. This SR policy contains segments for traffic engineering (C1) and for service chaining (S1).</t>
          <t>The nodes S1 and C1 perform their related Endpoint functionality and forward.</t>
          <t>When the packet arrives to UPF2, the active segment (U2::1) is an End.DT4/6 which performs the decapsulation (removing the IPv6 header with all it's extension headers) and forward towards the data network.</t>
          <t>Note that in case several APNs are using duplicated IPv4 private address spaces, then the aggregated SR policies are unique per APNs.</t>
        </section>
        <section title="Packet flow - Downlink">
          <t>The downlink packet flow is the following:</t>
          <figure>
            <artwork align="center"><![CDATA[
UPF2_in : (Z,A)                              -> UPF2 maps the flow w/
                                                SID list <C1,S1, gNB>
UPF2_out: (U2::1, C1)(gNB, S1; SL=2)(Z,A)    -> T.Encaps.Red
C1_out  : (U2::1, S1)(gNB, S1; SL=1)(Z,A)
S1_out  : (U2::1, gNB)(Z,A)                  -> PSP
gNB_out : (Z,A)                              -> End.DX4 or End.DX6
            ]]></artwork>
          </figure>
          <t>When the packet arrives to the UPF2, the UPF2 will map that particular flow into a UE session. This UE session is associated with the policy &lt;C1, S1, gNB&gt;. The UPF2 performs a T.Encaps.Reduced operation, encapsulating the packet into a new IPv6 header with its corresponding SRH.</t>
          <t>The nodes C1 and S1 perform their related Endpoint processing.</t>
          <t>Once the packet arrives to the gNB, the IPv6 DA corresponds to an End.DX4 or End.DX6 (depending on the underlying traffic). The gNB will decapsulate the packet, removing the IPv6 header and all it's extensions headers and will forward the traffic towards the UE.</t>
        </section>

        <section title="IPv6 user-traffic">
          <t>For IPv6 user-traffic it is RECOMMENDED to perform encapsulation. However based on local policy, a service provider MAY choose to do SRH insertion. The main benefit is a lower overhead. In such case, the functions used are T.Insert.Red at gNB and End.T at UPF2 on Uplink, T.Insert.Red at UPF2 and End.X at gNB on Downlink.</t>
        </section>
      </section>

      <section anchor="enhanced_gtp" title="Enhanced mode with unchanged gNB GTP behavior">
        <t>In this section we introduce two mechanisms for interworking with legacy gNBs that still use GTP. One of the mechanisms is valid for IPv4 while the other for IPv6.</t>
        <t>In this scenario, it is assumed that gNB does not support SRv6. It just supports GTP encapsulation over IPv4 or IPv6. Hence in order to achieve interworking we are going to add a new SR Gateway (SRGW-UPF1) entity. This SRGW is going to map the GTP traffic into SRv6. Note that the SR GW is not an anchor point.</t>
        <t>The SRGW maintains very little state on it. For this reason, both of these methods (IPv4 and IPv6) scale to millions of UEs.</t>
        <figure anchor="fig_interworking" title="Reference topology for interworking">
            <artwork align="center"><![CDATA[
                                                          _______
                 IP GTP          SRv6                    /       \
+--+      +-----+ [N3] +------+  [N9]  +------+  [N6]   /         \
|UE|------| gNB |------| UPF1 |--------| UPF2 |---------\   DN    /
+--+      +-----+      +------+        +------+          \_______/
                      SR Gateway       SRv6 node
              ]]></artwork>
        </figure>

        <section title="Interworking with IPv6 GTP">
          <t>In this interworking mode we assume that the gNB is using GTP over IPv6 in the N3 interface</t>
          <t>Key points:
          <list style='symbols'>
            <t>gNB is unchanged (control-plane or user-plane) and encaps into GTP (N3 interface is not modified).</t>
            <t>5G Control-Plane (N2 interface) is unmodified: 1 IPv6 address (i.e. a BSID at the SRGW)</t>
            <t>SRGW removes GTP, finds SID list related to DA, add SRH with the SID list.</t>
            <t>There is NO state for the downlink at the SRGW.</t>
            <t>There is simple state in the uplink at the SRGW (leveraging the enhanced mode results in few SR policies on this node. A SR policy can be shared across UEs).</t>
            <t>As soon as the packet leaves the gNB (uplink), the traffic is SR-routed. This simplifies considerably network slicing <xref target="I-D.hegdeppsenak-isis-sr-flex-algo"/>.</t>
            <t>In the uplink, we use the IPv6 DA BSID to steer the traffic into an SR policy when it arrives at the SRGW-UPF1-.</t>
          </list></t>
          <t>Our reference topology is shown in <xref target="fig_interworking_ipv6"/>. In this mode we assume that the gNB is an unmodified gNB using IPv6/GTP. The UPFs are SR-aware. Also, as explained before, we introduce a new SRGW entity that is going to map the IPv6/GTP traffic to SRv6.</t> 
          <t>We also assume that we have two service segment, S1 and C1. S1 represents a VNF in the network, and C1 represents a router over which we are going to perform Traffic Engineering.</t>
          <figure anchor="fig_interworking_ipv6" title="Enhanced mode with unchanged gNB IPv6/GTP behavior">
            <artwork align="center"><![CDATA[    
                               +----+
             IPv6/GTP         -| S1 |-                            ___
+--+  +-----+ [N3]           / +----+ \                          /   
|UE|--| gNB |-         SRv6 /   SRv6   \ +----+   +------+ [N6] /    
+--+  +-----+ \        [N9]/    NFV     -| C1 |---| UPF2 |------\  DN
        GTP    \ +------+ /              +----+   +------+       \___
                -| UPF1 |-                SRv6      SRv6
                 +------+                  TE       
                SR Gateway
                ]]></artwork>
          </figure>

          <section title="Packet flow - Uplink">
            <t>The uplink packet flow is the following:</t>
            <figure>
              <artwork align="center"><![CDATA[
UE_out  : (A,Z)
gNB_out : (gNB, B)(GTP: TEID T)(A,Z)       -> Interface N3 unmodified
                                              (IPv6/GTP)
SRGW_out: (SRGW, S1)(U2::1, C1; SL=2)(A,Z) -> B is an End.M.GTP6.D
                                              SID at the SRGW
S1_out  : (SRGW, C1)(U2::1, C1; SL=1)(A,Z)
C1_out  : (SRGW, U2::1)(A,Z)               -> PSP
UPF2_out: (A,Z)                            -> End.DT4 or End.DT6 
              ]]></artwork>
            </figure>
            <t>The UE sends a packet destined to Z towards the gNB on a specific bearer for that session. The gNB, which is unmodified, encapsulates the packet into a new IPv6, UDP and GTP headers. The IPv6 DA B, and the GTP TEID T are the ones received in the N2 interface.</t>
            <t>The IPv6 address that was signalled over the N2 interface for that UE session, B, is now the IPv6 DA. B is an SRv6 Binding SID instantiated at the SRGW. Hence the packet, will be routed up to the SRGW.</t>
            <t>When the packet arrives at the SRGW, the SRGW realises that B is an End.M.GTP6.D BindingSID. Hence, the SRGW will remove the IPv6, UDP and GTP headers, and will push a new IPv6 header with its own SRH containing the SIDs bound to the SR policy associated with this BindingSID.</t>
            <t>The nodes S1 and C1 perform their related Endpoint functionality and forward.</t>
            <t>When the packet arrives to UPF2, the active segment is (U2::1) which bound to End.DT4/6 which is going to perform the decapsulation (removing the outer IPv6 header with all it's extension headers) and forward towards the data network.</t>
          </section>

          <section title="Packet flow - Downlink">
            <t>The downlink packet flow is the following:</t>
            <figure>
              <artwork align="center"><![CDATA[
UPF2_in : (Z,A)                           -> UPF2 maps the flow with
                                             <C1, S1, SRGW::TEID,gNB>
UPF2_out: (U2::1, C1)(gNB, SRGW::TEID, S1; SL=3)(Z,A) -> T.Encaps.Red
C1_out  : (U2::1, S1)(gNB, S1; SL=2)(Z,A)
S1_out  : (U2::1, SRGW::TEID)(gNB, SRGW::TEID, S1, SL=1)(Z,A)
SRGW_out: (SRGW, gNB)(GTP: TEID=T)(Z,A)   -> SRGW/96 is End.M.GTP6.E
gNB_out : (Z,A)
              ]]></artwork>
            </figure>
            <t>When a packet destined to A arrives at the UPF2, the UPF2 performs a lookup in the associated table to A and finds the SID list &lt;C1, S1, SRGW::TEID, gNB&gt;. The UPF2 performs a T.Encaps.Reduced operation, encapsulating the packet into a new IPv6 header with its corresponding SRH.</t>
            <t>The nodes C1 and S1 perform their related Endpoint processing.</t>
            <t>Once the packet arrives to the SRGW, the SRGW realizes the active SID is an End.M.GTP6.E function. The SRGW removes the IPv6 header and all it's extensions headers. The SRGW generates an IPv6, UDP and GTP headers. The new IPv6 DA is the gNB which is the last SID in the received SRH. The TEID in the generated GTP header is the arguments of the received End.M.GTP6.E SID. The SRGW pushes the headers to the packet and forwards the packet towards the gNB.</t>
            <t>Once the packet arrives to the gNB, the packet is a regular IPv6/GTP packet. The gNB looks for the specific radio bearer for that TEID and forward it on the bearer. This gNB behavior  is not modified from current and previous generations.</t>
          </section>

          <section title="Scalability">
            <t>For the downlink traffic, the SRGW is stateless. All the state is in the SRH imposed by the UPF2. The UPF2 must have the UE states as the session anchor point.</t>
            <t>For the uplink traffic, the state at the SRGW does not necessarily need to be per UE session basis. A state of SR policy of which state can be shared among UE's. Hence it is possible to deploy SRGW in very scalable way compared to hold millions of states per UE session basis.</t>
          </section>

          <section title="IPv6 user-traffic">
            <t>For IPv6 user-traffic it is RECOMMENDED to perform encapsulation. However based on local policy, a service provider MAY choose to do SRH insertion. The main benefit is a lower overhead.</t>
          </section>
        </section>

        <section title="Interworking with IPv4 GTP">
          <t>In this interworking mode we assume that the gNB is using GTP over IPv4 in the N3 interface</t>
          <t>Key points:
          <list style='symbols'>
            <t>gNB is unchanged and encaps into GTP (N3 interface is not modified).</t>
            <t>In the uplink, traffic is classified at SRGW by UL CL(Uplink Classifier) and steered into an SR policy. The SRGW is a UPF1 functionality, hence it can coexist with UPF UL CL functionality.</t>
            <t>SRGW removes GTP, finds SID list related to DA, add SRH with SID list.</t>
          </list></t>

          <t>Our reference topology is shown in <xref target="fig_interworking_ipv4"/>. In this mode we assume that the gNB is an unmodified gNB using IPv4/GTP. The UPFs are SR-aware. Also, as explained before, we introduce a new SRGW entity that is going to map the IPv4/GTP traffic to SRv6.</t> 
          <t>We also assume that we have two service segment, S1 and C1. S1 represents a VNF in the network, and C1 represents a router over which we are going to perform Traffic Engineering.</t>

          <figure anchor="fig_interworking_ipv4" title="Enhanced mode with unchanged gNB IPv4/GTP behavior">
            <artwork align="center"><![CDATA[    
                               +----+
             IPv4/GTP         -| S1 |-                            ___
+--+  +-----+ [N3]           / +----+ \                          /   
|UE|--| gNB |-         SRv6 /   SRv6   \ +----+   +------+ [N6] /    
+--+  +-----+ \        [N9]/    NFV     -| C1 |---| UPF2 |------\  DN
        GTP    \ +------+ /              +----+   +------+       \___
                -| UPF1 |-                SRv6      SRv6
                 +------+                  TE       
                SR Gateway
                ]]></artwork>
          </figure>

          <section title="Packet flow - Uplink">
            <t>The uplink packet flow is the following:</t>             
            <figure>
              <artwork align="center"><![CDATA[
gNB_out : (gNB, B)(GTP: TEID T)(A,Z)          -> Interface N3
                                                 unchanged IPv4/GTP
SRGW_out: (SRGW, S1)(U2::1, C1; SL=2)(A,Z)    -> T.M.Tmap function
S1_out  : (SRGW, C1)(U2::1, C1; SL=1)(A,Z)
C1_out  : (SRGW, U2::1) (A,Z)                 -> PSP
UPF2_out: (A,Z)                               -> End.DT4 or End.DT6
              ]]></artwork>
            </figure>
            <t>The UE sends a packet destined to Z towards the gNB on a specific bearer for that session. The gNB, which is unmodified, encapsulates the packet into a new IPv4, UDP and GTP headers. The IPv4 DA, B, and the GTP TEID are the ones received at the N2 interface.</t>
            <t>When the packet arrives to the SRGW -UPF1-, the SRGW has an UL CL (uplink classifier) rule for incoming traffic from the gNB that steers the traffic into an SR policy by using the function T.M.TMap. The SRGW removes the IPv4, UDP and GTP headers and pushes an IPv6 header with its own SRH containing the SIDs related to the SR policy associated with this traffic. The SRGW forwards according to the new IPv6 DA.</t>
            <t>The nodes S1 and C1 perform their related Endpoint functionality and forward.</t>
            <t>When the packet arrives at UPF2, the active segment is (U2::1) which is bound to End.DT4/6 which performs the decapsulation (removing the outer IPv6 header with all it's extension headers) and forwards towards the data network.</t>
          </section>

          <section title="Packet flow - Downlink">
            <t>The downlink packet flow is the following:</t>
            <figure>
              <artwork align="center"><![CDATA[
UPF2_in : (Z,A)                            -> UPF2 maps flow with SID
                                            <C1, S1,SRGW::SA:DA:TEID>
UPF2_out: (U2::1, C1)(SRGW::SA:DA:TEID, S1; SL=2)(Z,A) ->T.Encaps.Red
C1_out  : (U2::1, S1)(SRGW::SA:DA:TEID, S1; SL=1)(Z,A)
S1_out  : (U2::1, SRGW::SA:DA:TEID)(Z,A)
SRGW_out: (SA, DA)(GTP: TEID=T)(Z,A)       -> End.M.GTP4.E
gNB_out : (Z,A)
              ]]></artwork>
            </figure>
            <t>When a packet destined to A arrives to the UPF2, the UPF2 performs a lookup in the associated table to A and finds the SID list &lt;C1, S1, SRGW::SA:DA:TEID&gt;. The UPF2 performs a T.Encaps.Reduced operation, encapsulating the packet into a new IPv6 header with its corresponding SRH.</t>
            <t>The nodes C1 and S1 perform their related Endpoint processing.</t>
            <t>Once the packet arrives to the SRGW, the SRGW realizes the active SID is an End.M.GTP4.E function. The SRGW removes the IPv6 header and all it's extensions headers. The SRGW generates an IPv4, UDP and GTP headers. The IPv4 SA and DA will the ones received as part of the SID arguments. The TEID in the generated GTP header is also the arguments of the received End.M.GTP4.E SID The SRGW pushes the headers to the packet and forwards the packet towards the gNB.</t>
            <t>Once the packet arrives to the gNB, the packet is a regular IPv4/GTP packet. The gNB looks  for the specific radio bearer for that TEID and forward it on the bearer. This gNB behavior is not modified from current and previous generations.</t>
          </section>

          <section title="Scalability">
            <t>For the downlink traffic, the SRGW is stateless. All the state is in the SRH imposed by the UPF. The UPF must have this UE-base state anyway (it is its anchor point).</t>
            <t>For the uplink traffic, the state at the SRGW is dedicated on a per UE/session basis. This is an UL CL (uplink classifier). There is state for steering the different sessions on a SR policies. Notice however that the SR policies are shared among several UE/sessions.</t>
          </section>

          <section title="IPv6 user-traffic">
            <t>For IPv6 user-traffic it is RECOMMENDED to perform encapsulation. However based on local policy, a service provider MAY choose to do SRH insertion. The main benefit is a lower overhead.</t>
          </section>
        </section>

        <section title="Extensions to the interworking mechanisms">
          <t>In this section we presented two mechanisms for interworking with gNBs that do not support SRv6. These mechanism are done to support GTP over IPv4 and GTP over IPv6.</t>
          <t>Even though we have presented these methods as an extension to the &quot;Enhanced mode&quot;, it is straightforward in its applicability to the &quot;Traditional mode&quot;.</t>
          <t>Furthermore, although these mechanisms are designed for interworking with legacy RAN at the N3 interface, these methods could also be applied for interworking with a non-SRv6 capable UPF at the N9 interface (e.g. L3-anchor is SRv6 capable but L2-anchor is not).</t>
        </section>
      </section>
    </section>
    
    <section anchor="srv6_functions" title="SRv6 SID Mobility Functions">
      <!-- Add text on functions used on UPF1, UPF2,... -->
      
      <section title="End.MAP: Endpoint function with SID mapping">
        <t>The "Endpoint function with SID mapping" function (End.MAP for short) is used in several scenarios. Particularly in mobility, it is used in the UPFs for the anchor functionality in some of the use-cases.</t>
    
        <t>When a SR node N receives a packet destined to S and S is a local End.MAP SID, N does:</t>

        <figure><artwork align="left"><![CDATA[
1.    look up the IPv6 DA in the mapping table 
2.    update the IPv6 DA with the new mapped SID              ;; Ref1
3.    forward according to the new mapped SID
4. ELSE                                          
5.    Drop the packet                            
          ]]></artwork></figure>

        <t>Ref1: Note that the SID in the SRH is NOT modified.</t>
      </section>

      <section title="End.M.GTP6.D: Endpoint function with decapsulation from IPv6/GTP tunnel">
        <t>The "Endpoint function with IPv6/GTP decapsulation into SR policy" function (End.M.GTP6.D for short) is used in interworking scenario for the uplink towards from the legacy gNB using IPv6/GTP. This SID is associated with an SR policy &lt;S1, S2, S3&gt; and an IPv6 Source Address A.</t>
    
        <t>When the SR Gateway node N receives a packet destined to S and S is a local End.M.GTP6.D SID, N does:</t>

        <figure><artwork align="left"><![CDATA[
1. IF NH=UDP & UDP_PORT = GTP THEN            
2.    pop the IP, UDP and GTP headers
3.    push a new IPv6 header with its own SRH <S2, S3>
4.    set the outer IPv6 SA to A
5.    set the outer IPv6 DA to S1
6.    forward according to the first segment of the SRv6 Policy
7. ELSE                                          
8.    Drop the packet                            
          ]]></artwork></figure>
      </section>

      <section title="End.M.GTP6.E: Endpoint function with encapsulation for IPv6/GTP tunnel">
        <t>The "Endpoint function with encapsulation for IPv6/GTP tunnel" function (End.M.GTP6.E for short) is used in interworking scenario for the downlink towards the legacy gNB using IPv6/GTP.</t>

        <t>The End.M.GTP6.E function has a 32-bit argument space. This argument corresponds to the GTP TEID.</t>
    
        <t>When the SR Gateway node N receives a packet destined to S and S is a local End.M.GTP6.E SID, N does:</t>

        <figure><artwork align="left"><![CDATA[
 1. IF NH=SRH & SL = 1  THEN                                  ;; Ref1
 2.    decrement SL                               
 3.    store SRH[SL] in variable new_DA
 4.    store TEID in variable new_TEID                        ;; Ref2
 5.    pop IP header and all it's extension headers   
 6.    push new IPv6 header and GTP-U header
 7.    set IPv6 DA to new_DA
 8.    set GTP_TEID to new_TEID
 9.    lookup the new_DA and forward the packet accordingly
10. ELSE                                          
11.    Drop the packet                            
          ]]></artwork></figure>

        <t>Ref1: An End.M.GTP6.E SID MUST always be the penultimate SID.</t>
        <t>Ref2: TEID is extracted from the argument space of the current SID.</t>
      </section>

      <section title="End.M.GTP4.E: Endpoint function with encapsulation for IPv4/GTP tunnel">
        <t>The "Endpoint function with encapsulation for IPv4/GTP tunnel" function (End.M.GTP4.UP for short) is used in the downlink when doing interworking with legacy gNB using IPv4/GTP.</t>
    
        <t>When the SR Gateway node N receives a packet destined to S and S is a local End.M.GTP4.E SID, N does:</t>

        <figure><artwork align="left"><![CDATA[
1. IF NH=SRH & SL > 0 THEN                   
2.    decrement SL                               
3.    update the IPv6 DA with SRH[SL]
4.    pop the SRH
5.    push header of TUN-PROTO with tunnel ID from S          ;; Ref1
6.    push outer IPv4 header with SA, DA from S  
7. ELSE                                          
8.    Drop the packet                            
          ]]></artwork></figure>

        <t>Ref1: TUN-PROTO indicates target tunnel type.</t>

        <t>Note that S has the following format:</t>
        <figure title="End.M.GTP4.E SID Encoding">
          <artwork align="center"><![CDATA[
+----------------------+-------+-------+-------+
|  SRGW-IPv6-LOC-FUNC  |IPv4DA |IPv4SA |TUN-ID |
+----------------------+-------+-------+-------+
        128-a-b-c          a      b       c
          ]]></artwork>
        </figure>   
      </section>
            
      <section title="T.M.Tmap: Transit behavior with IPv4/GTP decapsulation and mapping into an SRv6 Policy">
        <t>The "Transit with tunnel decapsulation and map to an SRv6 policy" function (T.Tmap for short) is used in the direction from legacy user-plane to SRv6 user-plane network.</t>

        <t>When the SR Gateway node N receives a packet destined to a IW-IPv4-Prefix, N does:</t>

        <figure><artwork align="left"><![CDATA[
1. IF P.PLOAD == TUN-PROTO THEN    ;; Ref1
2.    pop the outer IPv4 header and tunnel headers                   
3.    copy IPv4 DA, SA, TUN-ID to form SID B with SRGW-IPv6-Prefix   
4.    encapsulate the packet into a new IPv6 header  ;; Ref2, Ref2bis
5.    set the IPv6 DA = B                                            
6.    forward along the shortest path to B                           
7. ELSE                                                              
8.    Drop the packet                                                
          ]]></artwork></figure>
        
        <t>Ref1: TUN-PROTO indicates target tunnel type.</t>

        <t>Note that B has the following format:</t>
        <figure title="End.M.GTP4.E SID Encoding">
          <artwork align="center"><![CDATA[
+----------------------+-------+-------+-------+
|  SRGW-IPv6-LOC-FUNC  |IPv4DA |IPv4SA |TUN-ID |
+----------------------+-------+-------+-------+
        128-a-b-c          a      b       c
          ]]></artwork>
        </figure>

        <t>Note that the B SID, is going to be an SRv6 BindingSID instantiated at the first UPF (anchor point). A static format is leveraged to instantiate this Binding SIDs in order to remove state from the SRGW.</t>
      </section>

      <section title="End.Limit: Rate Limiting function">
        <t>Mobile user-plane requires a rate-limit feature. SID is
        able to encode limiting rate as an argument in SID. Multiple flows of packets should have same group identifier in SID when those flows are in an same AMBR group. This helps to keep user-plane stateless. That enables SRv6 endpoint nodes which are unaware from the mobile control-plane information. Encoding format of rate limit segment SID is following:</t>
        <figure title="End.Limit: Rate limiting function argument format">
          <artwork align="center"><![CDATA[
+----------------------+----------+-----------+
| LOC+FUNC rate-limit  | group-id | limit-rate|
+----------------------+----------+-----------+
      128-i-j                i          j
              ]]></artwork>
        </figure>
        <t>In case of j bit length is zero in SID, the node should
        not do rate limiting unless static configuration or
        control-plane sets the limit rate associated to the
        SID.</t>
      </section>
    </section>

    <section anchor="netslice" title="Network Slicing Considerations">
        <t>A mobile network may be required to implement "network slices", which logically separate network resources. User-plane functions represented as SRv6 segments would be part of a slice.</t>
        
        <t>A simple way to represent slice would be to apply L2/L3 VPN described in <xref target="I-D.filsfils-spring-srv6-network-programming"/>. Segment Routing with <xref target="I-D.hegdeppsenak-isis-sr-flex-algo"/> provides even more advanced separation based on metrics like link-delay. Thus, a service provider would be able to have network slices per required SLA.</t>
        
        <t>The SRv6 SID and quite a few SR extended capability would be a powerful tool for providing logical separation/integration within a network. Details are for further study.</t>
    </section>

    <section anchor="c-plane" title="Control Plane Considerations">
        <t>This documents focuses on the dataplane behavior. The control planes could be based on the existing 3GPP based signalling for N4 interface <xref target="TS.29244"/>, <xref target="I-D.ietf-dmm-fpc-cpdp"/>, control-plane protocols described in [WHITEPAPER-5G-UP], etc. and to be discussed further.</t>

        <t>Note that the IANA section of this document allocates the SRv6 endpoint function types for the new functions defined in this document. All control-plane protocols are expected to leverage these function type-codes to signal each function.</t>

        <t>It's notable that SRv6's network programming nature allows a flexible and dynamic anchor placement. </t>
    </section>
<!--
    <section anchor="c-plane" title="Control Plane Considerations">
    
        <section anchor="existing-cplane" title="Existing Control Plane">
    
            <t>A mobile control-plane entity may allocate SIDs to the node
            of corresponding user-plane function. In this case, the
            control-plane entity must signal allocated SIDs to other side
            of entity. </t>
        
            <t>If the control-plane entity needs an existing mobile
            control-plane protocol to signal, GTP-C or PMIP for example, it must require
            not impact the control-plane protocols. In this case, a tunnel endpoint IPv6
            address field in the control-plane message can be used to signal a SID. </t>
            
            <t>The basic mode described in <xref target="traditional_mode"/> should be adopted.
            In the basic mode, SID indicates unique session so that tunnel identifier 
            is not required to SRv6 user-plane. But the mobile control-plane may
            assume that one user-plane entity has one IPv6 address and it allocates 
            one tunnel identifier per session. In this case, SRv6 node of user-plane can
            form SID with the IPv6 address and the tunnel identifier. </t>
            
            <t>When an IPv6 prefix "A::/64" is allocated to an user-plane, and 
            the control-plane allocates one 32-bits tunnel identifier of "0x12345678" for a
            mobile session, the user-plane node forms a 128-bits SID "A::1234:5678".</t>
            
            <t>In this way, there is no impact to the control-plane.</t>
            

        </section>
        
        <section anchor="aggr_cplane" title="Aggregate Mode">
        
            <t>To support aggregate mode as described in <xref
            target="enhanced_mode"/> for a control-plane protocol, allocated SIDs
            for service policies can also be signaled as a tunnel endpoint IPv6 address.
            In this case, the SRv6 policy associated to the SID should be configured
            in the user-plane node through other means.</t>
            
            <t>Aggregate mode user-plane can take advantage of SRv6 that
            enables seamless mobile user-plane deployment with service chaining,
            VPNs, traffic-engineering by computing a path to fulfill the policy.</t>
            
            <t>If a mobile control-plane is aware of those policies and is 
            capable to advertise them, the mobile control-plane can integrate
            SRv6 advanced features.</t>
        
        </section>
        
        <section anchor="cups" title="User-Plane Separated Control Plane">

            <t>In an user-plane separated control-plane system, a mobile
            user-plane entity may allocate SIDs to an user-plane function
            instead of the control-plane. In this case, the user-plane
            entity should inform allocated SIDs back to the control-plane
            entity.</t>

            <t>If the control- and user-plane entities need to employ
            existing user-plane control protocols in between, such as PFCP
            <xref target="TS.29244"/>
            for example, it may be required not to impact that protocol. In
            this case, the control-plane entity only is allowed to signal
            SID in a tunnel endpoint IPv6 address field. </t>

        </section>
        
        <section anchor="centralize-sdn" title="Centralized Controller">

            <t>When a centralized controller that interfaces to mobile
            control-planes is capable to allocate SIDs to the controlling SRv6
            nodes, the mobile control-planes just needs to indicate 
            nodes and their user-plane functions to the controller. In
            this case, the controller must allocate appropriate SIDs for the
            user-plane functions to the SRv6 nodes. The controller
            must configure allocated SIDs to the nodes. </t>
        
            <t>To indicate nodes and their user-plane functions from mobile
            control-plane to user-plane, the centralized controller could take
            advantage of <xref target="I-D.ietf-dmm-fpc-cpdp"/>. It provides
            interface to the control-plane to manage the user-plane of mobile
            networks. To build centralized controller for mobile user-plane is
            out of scope of this document.</t>

        </section>
        
        <section anchor="iwf-cplane" title="Stateless Interworking">
        
            <t>A mobile control-plane is not required to configure stateless interworking
            function in interworking node. This benefits operators to gradually migrate
            from legacy to advanced mobile user-plane with no impact to the legacy system.</t>
        
            <t>SID allocating entity of SRv6 user-plane nodes needs to be aware of
            IW-IPv6-Prefix to form interworking SID. Legacy user-plane network allocate
            IPv4 address space routed to SRv6 user-plane network. The mobile control-plane
            of legacy user-plane also need to allocate tunnel endpoint IPv4 addresses from
            that address space for mobile sessions which is usual operation for it and no
            difference from legacy system.</t>
        
        </section>   
    </section>
-->

    <section title="Security Considerations">
        <t>TBD</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This I-D requests to IANA to allocate, within the &quot;SRv6 Endpoint Types&quot; sub-registry belonging to the top-level &quot;Segment-routing with IPv6 dataplane (SRv6) Parameters&quot; registry <xref target="I-D.filsfils-spring-srv6-network-programming"/>, the following allocations:</t>

      <texttable anchor="endpoint_opcodes" title="SRv6 Mobile User-plane Endpoint Types">
          <ttcol align="left">Value/Range</ttcol>
          <ttcol align="center">Hex</ttcol>
          <ttcol align="center">Endpoint function</ttcol>
          <ttcol align="center">Reference</ttcol>
          
          <c>TBA</c>
          <c>TBA</c>
          <c>End.MAP</c>
          <c>[This.ID]</c>  
          <c>TBA</c>
          <c>TBA</c>
          <c>End.M.GTP6.D</c>
          <c>[This.ID]</c>
          <c>TBA</c>
          <c>TBA</c>
          <c>End.M.GTP6.E</c>
          <c>[This.ID]</c>
          <c>TBA</c>
          <c>TBA</c>
          <c>End.M.GTP4.E</c>
          <c>[This.ID]</c>
          <c>TBA</c>
          <c>TBA</c>
          <c>End.Limit</c>
          <c>[This.ID]</c>
      </texttable>
    </section>

    <section anchor="acknowledge" title="Acknowledgements">
      <t>The authors would like to thank Daisuke Yokota, Bart Peirens, Ryokichi Onishi, Kentaro Ebisawa, Peter Bosch and Darren Dukes for their useful comments of this work.</t>
    </section>

  </middle>

  <back>
    <references title="Normative References">
        &rfc2119;
        &I-D.ietf-spring-segment-routing;
        &I-D.filsfils-spring-srv6-network-programming;
    </references>

    <references title="Informative References">
        &I-D.ietf-dmm-fpc-cpdp;
        &I-D.hegdeppsenak-isis-sr-flex-algo;
        &I-D.gundavelli-dmm-mfa;
        &rfc5213;
        <reference anchor="TS.29281">
            <front>
                <title>General Packet Radio System (GPRS) Tunnelling
                Protocol User Plane (GTPv1-U)</title>
                <author surname="3GPP" fullname="3GPP">
                </author>
                <date month="December" year="2017" />
            </front>
            <seriesInfo name="3GPP TS 29.281" value="15.1.0" />
        </reference>
        <reference anchor="TS.29244">
            <front>
                <title>Interface between the Control Plane
                and the User Plane Nodes</title>
                <author surname="3GPP" fullname="3GPP">
                </author>
                <date month="December" year="2017" />
            </front>
            <seriesInfo name="3GPP TS 29.244" value="15.0.0" />
        </reference>
        <reference anchor="TS.23501">
            <front>
                <title>System Architecture for the 5G System</title>
                <author surname="3GPP" fullname="3GPP">
                </author>
                <date month="November" year="2017" />
            </front>
            <seriesInfo name="3GPP TS 23.501" value="15.0.0" />
        </reference>
    </references>
  </back>
</rfc>
