<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY rfc5213 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5213.xml">
  <!ENTITY rfc8402 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8402.xml">
  <!ENTITY I-D.ietf-spring-segment-routing-policy SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-spring-segment-routing-policy.xml">
  <!ENTITY I-D.ietf-spring-srv6-network-programming SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-spring-srv6-network-programming.xml">
  <!ENTITY I-D.xuclad-spring-sr-service-programming SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.xuclad-spring-sr-service-programming.xml">
  <!ENTITY I-D.ietf-6man-segment-routing-header SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-6man-segment-routing-header.xml">
  <!ENTITY I-D.ietf-spring-segment-routing-central-epe SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-spring-segment-routing-central-epe.xml">
  <!ENTITY I-D.hegdeppsenak-isis-sr-flex-algo SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.hegdeppsenak-isis-sr-flex-algo.xml">
  <!ENTITY I-D.ietf-dmm-fpc-cpdp SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dmm-fpc-cpdp.xml">
  <!ENTITY I-D.gundavelli-dmm-mfa SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.gundavelli-dmm-mfa.xml">
  <!ENTITY I-D.auge-dmm-hicn-mobility-deployment-options SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.auge-dmm-hicn-mobility-deployment-options.xml">
  <!ENTITY I-D.camarillo-dmm-srv6-mobile-pocs SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.camarillo-dmm-srv6-mobile-pocs.xml">
  <!ENTITY I-D.rodrigueznatal-lisp-srv6 SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.rodrigueznatal-lisp-srv6.xml">
  <!ENTITY I-D.camarilloelmalky-springdmm-srv6-mob-usecases SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.camarilloelmalky-springdmm-srv6-mob-usecases.xml">
  <!ENTITY I-D.ali-spring-network-slicing-building-blocks SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ali-spring-network-slicing-building-blocks.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<rfc category="std" docName="draft-ietf-dmm-srv6-mobile-uplane-05"
	ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
  <?rfc toc="yes" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc compact="yes" ?>
  <?rfc subcompact="yes" ?>
  <?rfc iprnotified="no" ?>
  <?rfc strict="yes" ?>
  <front>
    <title abbrev="SRv6-mobile-uplane">
			Segment Routing IPv6 for Mobile User Plane</title>

    <author fullname="Satoru Matsushima" initials="S." surname="Matsushima">
      <organization abbrev="SoftBank">SoftBank</organization>

      <address>
        <postal>
          <street></street>
          <city>Tokyo</city>
          <region></region>
          <code></code>
          <country>Japan</country>
        </postal>
        <email>satoru.matsushima@g.softbank.co.jp</email>
      </address>
    </author>
    
    <author fullname="Clarence Filsfils" initials="C." surname="Filsfils">
      <organization abbrev="Cisco Systems, Inc.">
				Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <region></region>
          <code></code>
          <country>Belgium</country>
        </postal>
        <email>cf@cisco.com</email>
      </address>
    </author>

    <author fullname="Miya Kohno" initials="M." surname="Kohno">
      <organization abbrev="Cisco Systems, Inc.">
		Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <region></region>
          <code></code>
          <country>Japan</country>
        </postal>
        <email>mkohno@cisco.com</email>
      </address>
    </author>

    <author fullname="Pablo Camarillo Garvia" initials="P." surname="Camarillo">
      <organization abbrev="Cisco Systems, Inc.">
			Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <region></region>
          <code></code>
          <country>Spain</country>
        </postal>
        <email>pcamaril@cisco.com</email>
      </address>
    </author>
    
    <author fullname="Daniel Voyer" initials="D." surname="Voyer">
      <organization abbrev="Bell Canada">Bell Canada</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <region></region>
          <code></code>
          <country>Canada</country>
        </postal>
        <email>daniel.voyer@bell.ca</email>
      </address>
    </author>

    <author fullname="Charles E. Perkins" initials="C.E." surname="Perkins">
       <organization abbrev="Futurewei">Futurewei Inc.</organization>
       <address>
         <postal>
           <street>2330 Central Expressway</street>
           <city>Santa Clara</city>
           <code>95050</code>
           <region>CA</region>
           <country>USA</country>
         </postal>
         <phone>+1-408-330-4586</phone>
         <email>charliep@computer.org</email>
       </address>
    </author>

    <date year="2019" />
    <workgroup>DMM Working Group</workgroup>

    <abstract>
      <t>
        This document shows the applicability of SRv6 (Segment Routing IPv6)
        to the user-plane of mobile networks. The network programming nature
        of SRv6 accomplish mobile user-plane functions in a simple manner.
        The statelessness of SRv6 and its ability to control both service
        layer path and underlying transport can be beneficial to the mobile
        user-plane, providing flexibility and SLA control for various applications.
        This document describes the SRv6 mobile user plane behavior and 
        defines the SID functions for that. It also provides a mechanism 
        for end-to-end network slicing.
      </t>
    </abstract>
  </front>

  <middle>
  <section title="Introduction">
    <t> In mobile networks, mobility management systems provide
        connectivity while mobile nodes move.  While the
        control-plane of the system signals movements of a mobile node, the
        user-plane establishes a tunnel between the mobile node and its anchor
        node over IP-based backhaul and core networks. </t>

    <t> This document shows the applicability of SRv6 (Segment
        Routing IPv6) to those mobile networks. SRv6 provides source
        routing to networks so that operators can explicitly indicate a route
        for the packets to and from the mobile node.  SRv6 endpoint nodes
        serve as the anchors of mobile user-plane. </t>
  </section>	<!-- End section "Introduction" -->

  <section title="Conventions and Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
	    "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
	    "OPTIONAL" in this document are to be interpreted as described in
	    <xref target="RFC2119"></xref>.
	</t>
        
        <section anchor="terms" title="Terminology">
        <t> <list style="symbols">
            <t>AMBR: Aggregate Maximum Bit Rate </t>
            <t>APN: Access Point Name (commonly used to identify a
			network or class of service)</t>
            <t>BSID: SR Binding SID <xref target="RFC8402"/></t>
            <t>CNF: Cloud-native Network Function</t>
            <t>gNB: gNodeB </t>
            <t>NH: The IPv6 next-header field.</t>
            <t>NFV: Network Function Virtualization </t>
            <t>PDU: Packet Data Unit</t>
            <t>Session: TBD...</t>
            <t>SID: A Segment Identifier which represents a specific
		segment in a segment routing domain.</t>
            <t>SRH: The Segment Routing Header. <xref target="I-D.ietf-6man-segment-routing-header"/></t>
            <t>TEID: Tunnel Endpoint Identifier </t>
            <t>UE: User Equipment </t>
            <t>UPF: User Plane Function </t>
            <t>VNF: Virtual Network Function </t>
            </list>
	</t>
    	</section>	<!-- End subsection "Terminology" -->

        <section anchor="conventions" title="Conventions">
	<t> <list style="symbols">
        <t> NH=SRH means that NH is 43 with routing type 4.</t> 
        <t> Multiple SRHs may be present inside each packet, but they must
	    follow each other.  The next-header field of each SRH, except the
	    last one, must be NH-SRH (43 type 4).</t>
        <t> For simplicity, no other extension headers are shown except
	    the SRH.</t>
        <t> The SID type used in this document is IPv6 address
	    (also called SRv6 Segment or SRv6 SID).</t>
        <t> gNB::1 is an IPv6 address (SID) assigned to the gNB.</t> 
        <t> U1::1 is an IPv6 address (SID) assigned to UPF1.</t> 
        <t> U2::1 is an IPv6 address (SID) assigned to UPF2.</t> 
        <t> U2:: is some other IPv6 address (SID) assigned to UPF2.</t> 
        <t> A SID list is represented as &lt;S1, S2, S3&gt; where S1 is the
	    first SID to visit, S2 is the second SID to visit and S3 is the
	    last SID to visit along the SR path.</t>
        <t> (SA,DA) (S3, S2, S1; SL) represents an IPv6 packet with:
	    <list style="symbols">
            <t> IPv6 header with source and destination addresses SA and DA
		respectively, and next-header SRH, with SID list
		&lt;S1, S2, S3&gt; with SegmentsLeft = SL</t>
            <t>The payload of the packet is not represented.</t>
            </list></t>
        <t> Note the difference between the &lt;&gt; and () symbols:
	    &lt;S1, S2, S3&gt; represents a SID list where S1 is the
	    first SID and S3 is the last SID. (S3, S2, S1; SL) represents
	    the same SID list but encoded in the SRH format where the
	    rightmost SID in the SRH is the first SID and the leftmost
	    SID in the SRH is the last SID. When referring to an SR
	    policy in a high-level use-case, it is simpler to use the
	    &lt;S1, S2, S3&gt; notation. When referring to an illustration
	    of the detailed behavior, the (S3, S2, S1; SL) notation is
	    more convenient.</t>
        <t> SRH[SL] represents the SID pointed by the SL field in the first
	    SRH. In our example, SRH[2] represents S1, SRH[1] represents S2
	    and SRH[0] represents S3.</t>
        <t> SRH[SL] can be different from the DA of the IPv6 header.</t>
        </list></t>
    	</section>	<!-- End subsection  "Conventions" -->

        <section anchor="srv6-funcs" title="Predefined SRv6 Functions">
        <t>
	    The following functions are defined in
	    <xref target="I-D.ietf-spring-srv6-network-programming"/>.
	    <list style="symbols">
            <t> End.DT4 means to decapsulate and forward using
		a specific IPv4 table lookup.</t>
            <t> End.DT6 means to decapsulate and forward using
		a specific IPv6 table lookup.</t>
            <t> End.DX4 means to decapsulate the packet and forward through
    a particular outgoing interface -or set of OIFs- configured with the SID.</t>
            <t> End.DX6 means to decapsulate and forward through
    a particular outgoing interface -or set of OIFs- configured with the SID.</t>
            <t> End.DX2 means to decapsulate the L2 frame and forward through a 
            particular outgoing interface -or set of OIFs- configured with the SID.</t>
            <t> End.T means to forward using a specific IPv6 table lookup.</t>
            <t> End.X means to forward through a link configured
		with the SID.</t>
            <t> T.Encaps.Red means encapsulation without pushing SRH
		(resulting in "Reduced" packet size).</t>
            <t> PSP means Penultimate Segment Pop.  The packet is
		subsequently forwarded without the popped SRH.</t>
            </list>
	    New SRv6 functions are defined in <xref target="srv6_functions"/>
	    to support the needs of the mobile user plane.
	</t>
    	</section>	<!-- End section "Predefined SRv6 Functions" -->

    </section>	<!-- End section "Conventions and Terminology" -->

    <section anchor="motivations" title="Motivation">
    <t> Mobility networks are becoming more challenging to operate.
	On one hand, traffic is constantly growing, and latency requirements
	are more strict; on the other-hand, there are new use-cases like
	NFV that are also challenging network management.</t>
    <t> The current architecture of mobile networks does not take into account
	the underlying transport.  The user-plane is rigidly fragmented into
	radio access, core and service networks, connected by tunneling
	according to user-plane roles such as access and anchor nodes. These
	factors have made it difficult for the operator
	to optimize and operate the data-path.
    </t>
    <t> In the meantime,
	applications have shifted to use IPv6, and network operators
	have started adopting IPv6 as their IP transport.
        SRv6, the IPv6 dataplane instantiation of Segment Routing
	<xref target="RFC8402"/>, integrates both
	the application data-path and the underlying transport layer into
	a single protocol, allowing operators to optimize the network in a
	simplified manner and removing forwarding state from the network. It is also
  suitable for virtualized environments, VNF/CNF to VNF/CNF networking.</t>
    <t> SRv6 specifies network-programming (see
  <xref target="I-D.ietf-spring-srv6-network-programming"/>).
  Applied to mobility, SRv6 can provide the user-plane functions needed
  for mobility management.  SRv6 takes advantage of underlying transport
  awareness and flexibility to improve mobility user-plane functions.</t>
    <t>The use-cases for SRv6 mobility are discussed in <xref target="I-D.camarilloelmalky-springdmm-srv6-mob-usecases"/>.</t>
    </section>	<!-- End section "Motivation" -->

    <section anchor="scenarios" title="A 3GPP Reference Architecture">
    <t> This section presents a reference architecture and possible deployment
        scenarios.</t>
        
    <t> <xref target="fig_5g-ref-arch"/> shows a reference diagram from
        the 5G packet core architecture <xref target="TS.23501"/>.</t>
    <t> The user plane described in this document does not depend on any
	specific architecture.  The 5G packet core architecture as shown is
	based on the latest 3GPP standards at the time of writing this draft.
	Other architectures can be seen in
	<xref target="I-D.gundavelli-dmm-mfa"/> and [WHITEPAPER-5G-UP].</t>
    <figure anchor="fig_5g-ref-arch" title="3GPP 5G Reference Architecture">
          <artwork align="center"><![CDATA[
                               +-----+
                               | AMF |
                               +-----+
                              /    | [N11]
                       [N2]  /  +-----+
                     +------/   | SMF |
                    /           +-----+
                   /              / \  
                  /              /   \  [N4]
                 /              /     \                    ________
                /              /       \                  /        \
+--+      +-----+ [N3] +------+  [N9]  +------+  [N6]    /          \
|UE|------| gNB |------| UPF1 |--------| UPF2 |--------- \    DN    /
+--+      +-----+      +------+        +------+           \________/
            ]]></artwork>
    </figure>
    <t>
          <list style="symbols">
            <t>gNB: gNodeB </t>
            <t>UPF1: UPF with Interfaces N3 and N9</t>
            <t>UPF2: UPF with Interfaces N9 and N6</t>
            <t>SMF: Session Management Function </t>
            <t>AMF: Access and Mobility Management Function </t>
            <t>DN: Data Network e.g. operator services, Internet access </t>
          </list>
    </t>
        
    <t> This reference diagram does not depict a UPF that is only connected
	to N9 interfaces, although the description in this document
	also work for such UPFs.</t>
    <t> Each session from an UE gets assigned to a UPF. Sometimes multiple 
        UPFs may be used, providing richer service functions.  A UE gets its
	IP address from the DHCP block of its UPF. 
        The UPF advertises that IP address block toward the Internet,
	ensuring that return traffic is routed to the right UPF. </t>
    </section>	<!-- End section "A 3GPP Reference Architecture" -->

    <section anchor="uplane-functions" title="User-plane behaviors">
    <t>This section describes some mobile user-plane behaviors using SRv6.</t>
      
    <t> In order to simplify the adoption of SRv6, we present two different
	"modes" that vary with respect to the use of SRv6.
	The first one is the "Traditional mode", which inherits the
	current 3GPP mobile user-plane. In this mode there is no change to
	mobility networks architecture, except that
	<xref target="TS.29281">GTP-U</xref> is replaced by SRv6.</t>
    <t> The second mode is the "Enhanced mode". In this mode
      the SR policy contains SIDs for Traffic Engineering
	    and VNFs, which results in effective end-to-end network slices.</t>

    <t>In both, the Traditional and the Enhanced modes, we assume that the 
      gNB as well as the UPFs are SR-aware (N3, N9 and -potentially- N6
       interfaces are SRv6).</t>

    <t>We introduce two mechanisms for interworking with legacy
    access networks (N3 interface is unmodified). In these document we 
    introduce them applied to the Enhanced mode, although they could be used 
    in combination with the Traditional mode as well.</t>
	   <t>One of these mechanisms is designed to interwork with legacy gNBs
	using GTP/IPv4. The second method is designed to interwork with
	legacy gNBs using GTP/IPv6.</t>

    <t> This document uses SRv6 functions defined in
	<xref target="I-D.ietf-spring-srv6-network-programming"/> as well
	as new SRv6 functions designed for the mobile user plane. The new SRv6
	functions are detailed in <xref target="srv6_functions"/>.
    </t>
    
        <section anchor="traditional_mode"
			title="Traditional mode">
        <t> In the traditional mode, the existing mobile UPFs remain unchanged
	    except for the use of SRv6 as the data
	    plane instead of GTP-U.  There is no impact to the rest of
	    mobile system.</t>

        <t> In existing 3GPP mobile networks, an UE session is mapped 1-for-1
	    with a specific GTP tunnel (TEID). This 1-for-1 mapping is
	    mirrored here to replace GTP encapsulation with the SRv6
	    encapsulation, while not changing anything else. There will be a unique SRv6 SID
	    associated with each UE session.</t>

        <t> The traditional mode minimizes the changes required to the mobile
	    system; it is a good starting point for forming a common basis.</t>

        <t> Our example topology is shown in <xref target="fig_traditional"/>.
	    In traditional mode the gNB and the UPFs are SR-aware.
	    In the descriptions of the uplink and downlink packet flow,
	    A is an IPv6 address of the UE, and Z is an IPv6 address reachable
	    within the Data Network DN.  A new SRv6 function End.MAP, defined
	    in <xref target="end-map-function"/>, is used.</t>

        <figure anchor="fig_traditional"
	    title="Traditional mode - example topology">
          <artwork align="center"><![CDATA[    
                                                           ________
                  SRv6           SRv6                     /        \
+--+      +-----+ [N3] +------+  [N9]  +------+  [N6]    /          \
|UE|------| gNB |------| UPF1 |--------| UPF2 |--------- \    DN    /
+--+      +-----+      +------+        +------+           \________/
         SRv6 node     SRv6 node       SRv6 node
                ]]></artwork>
        </figure>

          <section anchor="traditional_up" title="Packet flow - Uplink">
          <t> The uplink packet flow is as follows:</t>
          <figure>
            <artwork align="center"><![CDATA[
UE_out  : (A,Z)
gNB_out : (gNB, U1::1) (A,Z)     -> T.Encaps.Red <U1::1>
UPF1_out: (gNB, U2::1) (A,Z)     -> End.MAP
UPF2_out: (A,Z)                  -> End.DT4 or End.DT6]]></artwork>
          </figure>

          <t> When the UE packet arrives at the gNB, the gNB performs a
	      T.Encaps.Red operation. Since there is only one SID,
	      there is no need to push an SRH. gNB only adds an outer IPv6
	      header with IPv6 DA U1::1. U1::1 represents an anchoring
	      SID specific for that session at UPF1. gNB obtains the SID
	      U1::1 from the existing control plane (N2 interface).</t>

          <t> When the packet arrives at UPF1, the SID U1::1 identifies a
	      local End.MAP function.  End.MAP replaces U1::1 by U2::1, that
	      belongs to the next UPF (U2).</t>

          <t> When the packet arrives at UPF2, the SID U2::1 corresponds to
	      an End.DT function.  UPF2 decapsulates the packet, performs a
	      lookup in a specific table associated with that mobile network and 
	      forwards the packet toward the data network (DN).</t>

          </section>	<!-- End section "Packet flow - Uplink" -->

          <section anchor="traditional_dn" title="Packet flow - Downlink">
          <t>The downlink packet flow is as follows:</t>
          <figure>
            <artwork align="center"><![CDATA[
UPF2_in : (Z,A)
UPF2_out: (U2::, U1::1) (Z,A)    -> T.Encaps.Red <U1::1>
UPF1_out: (U2::, gNB::1) (Z,A)   -> End.MAP
gNB_out : (Z,A)                  -> End.DX4 or End.DX6
            ]]></artwork>
          </figure>

          <t> When the packet arrives at the UPF2, the UPF2 maps that flow into
	      a UE session. This UE session is associated with the segment
	      endpoint &lt;U1::1&gt;.  UPF2 performs
	      a T.Encaps.Red operation, encapsulating the packet into
	      a new IPv6 header with no SRH since there is only one SID.</t>

          <t> Upon packet arrival on UPF1, the SID U1::1 is a local End.MAP
	      function. This function maps the SID to the next anchoring
	      point and replaces U1::1 by gNB::1, that belongs to the next
	      hop.</t>

          <t> Upon packet arrival on gNB, the SID gNB::1 corresponds to an
	      End.DX4 or End.DX6 function. The gNB decapsulates the packet,
	      removing the IPv6 header and all its extensions headers, and
	      forwards the traffic toward the UE.</t>
        </section>	<!-- End section "Packet flow - Downlink" -->

        <section title="IPv6 user-traffic">
          <t>For IPv6 user-traffic it is RECOMMENDED to perform encapsulation.
	      However based on local policy, a service provider MAY choose to
	      do SRH insertion. The main benefit is a lower overhead(40B less). In such
	      case, the functions used are T.Insert.Red at gNB, End.MAP at
	      UPF1 and End.T at UPF2 on Uplink, T.Insert.Red at UPF2, End.MAP
	      at UPF1 and End.X at gNB on Downlink.</t>
        </section>	<!-- End section "IPv6 user-traffic" -->
      </section>	<!-- End section "Traditional mode" -->
      
      <section anchor="enhanced_mode" title="Enhanced Mode">
        <t> Enhanced mode improves scalability, traffic steering and service
	    programming <xref target="I-D.xuclad-spring-sr-service-programming"/>,
	    thanks to the use of multiple SIDs, instead of a single
	    SID as done in the Traditional mode.</t>

        <t> The main difference is that the SR policy MAY 
          include SIDs for traffic engineering and service programming
           in addition to the UPFs SIDs.</t>

        <t> The gNB control-plane (N2 interface) is unchanged, specifically
	    a single IPv6 address is given to the gNB.
            <list style='symbols'>        
              <t> The gNB MAY resolve the IP address into a SID list using
	          a mechanism like PCEP, DNS-lookup, small augment for LISP
	          control-plane, etc.</t>
            </list></t>
        <t> Note that the SIDs MAY use the arguments Args.Mob.Session if
        required by the UPFs.</t>
        <t> <xref target="fig_enhanced"/> shows an Enhanced mode topology.
	    In the Enhanced mode, the gNB and the UPF are SR-aware.
	    The Figure shows two service segments, S1 and C1.
	    S1 represents a VNF in the network, and C1 represents a constraint
	    path on a router requiring Traffic Engineering. S1 and C1 belong
	    to the underlay and don't have an N4 interface, so they are not
	    considered UPFs.</t>

        <figure anchor="fig_enhanced"
			title="Enhanced mode - Example topology">
          <artwork align="center"><![CDATA[    
                                 +----+  SRv6               _______
                 SRv6          --| C1 |--[N3]              /       \
+--+    +-----+  [N3]         /  +----+  \  +------+ [N6] /         \
|UE|----| gNB |--       SRv6 /    SRv6    --| UPF2 |------\   DN    /
+--+    +-----+  \      [N3]/      TE       +------+       \_______/
       SRv6 node  \ +----+ /               SRv6 node
                   -| S1 |-
                    +----+
                   SRv6 node
                     CNF
                ]]></artwork>
        </figure>
               
        <section anchor="enhanced_uplink" title="Packet flow - Uplink">
          <t>The uplink packet flow is as follows:</t>
          <figure>
            <artwork align="center"><![CDATA[
UE_out  : (A,Z)
gNB_out : (gNB, S1)(U2::1, C1; SL=2)(A,Z)-> T.Encaps.Red<S1,C1,U2::1>
S1_out  : (gNB, C1)(U2::1, C1; SL=1 (A,Z)
C1_out  : (gNB, U2::1)(A,Z)              -> PSP
UPF2_out: (A,Z)                          -> End.DT4 or End.DT6
            ]]></artwork>
          </figure>
          <t> UE sends its packet (A,Z) on a specific bearer to its gNB.
	      gNB's control plane associates that session from the UE(A) with
	      the IPv6 address B and GTP TEID T.  gNB's control plane does a
	      lookup on B to find the related SID list
	      &lt;S1, C1, U2::1&gt;. </t>
          <t> When gNB transmits the packet, it contains all the segments of
	      the SR policy. The SR policy can include segments for
	      traffic engineering (C1) and for service programming (S1). </t>
          <t> Nodes S1 and C1 perform their related Endpoint functionality
	      and forward the packet.</t>
          <t> When the packet arrives at UPF2, the active segment (U2::1) is
	      an End.DT4/6 which performs the decapsulation (removing the
	      IPv6 header with all its extension headers) and forwards toward
	      the data network.</t>
        </section>	<!-- End section "Packet flow - Uplink" -->

        <section title="Packet flow - Downlink">
          <t>The downlink packet flow is as follows:</t>
          <figure>
            <artwork align="center"><![CDATA[
UPF2_in : (Z,A)                              -> UPF2 maps the flow w/
                                                SID list <C1,S1, gNB>
UPF2_out: (U2::1, C1)(gNB, S1; SL=2)(Z,A)    -> T.Encaps.Red
C1_out  : (U2::1, S1)(gNB, S1; SL=1)(Z,A)
S1_out  : (U2::1, gNB)(Z,A)                  -> PSP
gNB_out : (Z,A)                              -> End.DX4 or End.DX6
            ]]></artwork>
          </figure>
          <t>When the packet arrives at the UPF2, the UPF2 maps that
	      particular flow into a UE session. This UE session is associated
	      with the policy &lt;C1, S1, gNB&gt;. The UPF2 performs a
	      T.Encaps.Red operation, encapsulating the packet into a
	      new IPv6 header with its corresponding SRH.</t>
          <t>The nodes C1 and S1 perform their related Endpoint processing.</t>
          <t>Once the packet arrives at the gNB, the IPv6 DA corresponds to
	      an End.DX4 or End.DX6 (depending on the underlying traffic).
	      The gNB decapsulates the packet, removing the IPv6 header
	      and all its extensions headers and forwards the traffic
	      toward the UE.</t>
        </section>	<!-- End section "Packet flow - Downlink" -->

        <section title="IPv6 user-traffic">
          <t>For IPv6 user-traffic it is RECOMMENDED to perform encapsulation.
	      However based on local policy, a service provider MAY choose to
	      do SRH insertion. The main benefit is a lower overhead. In such
	      case, the functions used are T.Insert.Red at gNB and End.T at
	      UPF2 on Uplink, T.Insert.Red at UPF2 and End.X at gNB on
	      Downlink.</t>
        </section>	<!-- End section "IPv6 user-traffic" -->
      </section>	<!-- End section "Enhanced Mode" -->

      <section anchor="enhanced_gtp"
		title="Enhanced mode with unchanged gNB GTP behavior">
        <t> This section describes two mechanisms for interworking with legacy
	    gNBs that still use GTP: one for IPv4, the other for IPv6.</t>
        <t> In the interworking scenarios as illustrated in
	    <xref target="fig_interworking"/>, gNB does not support SRv6.
	    gNB supports GTP encapsulation over IPv4 or IPv6.  To achieve
	    interworking, a SR Gateway (SRGW-UPF1) entity is added.  The SRGW
	    maps the GTP traffic into SRv6.</t>
        <t> The SRGW is not an anchor point, and maintains very little state.
	    For this reason,
	    both IPv4 and IPv6 methods scale to millions of UEs.</t>
        <figure anchor="fig_interworking"
				title="Example topology for interworking">
            <artwork align="center"><![CDATA[
                                                          _______
                 IP GTP          SRv6                    /       \
+--+      +-----+ [N3] +------+  [N9]  +------+  [N6]   /         \
|UE|------| gNB |------| UPF1 |--------| UPF2 |---------\   DN    /
+--+      +-----+      +------+        +------+          \_______/
                      SR Gateway       SRv6 node
              ]]></artwork>
        </figure>

        <section title="Interworking with IPv6 GTP">
          <t>In this interworking mode the gNB uses GTP
	      over IPv6 via the N3 interface</t>
          <t>Key points:
          <list style='symbols'>
            <t> The gNB is unchanged (control-plane or user-plane) and
		encapsulates into GTP (N3 interface is not modified).</t>
            <t> The 5G Control-Plane (N2 interface) is unmodified;
		one IPv6 address is needed (i.e. a BSID at the SRGW).</t>
            <t> The SRGW removes GTP, finds the SID list related to DA,
	        and adds SRH with the SID list.</t>
            <t> There is no state for the downlink at the SRGW.</t>
            <t> There is simple state in the uplink at the SRGW; using
		Enhanced mode results in fewer SR policies on this node.
		A SR policy can be shared across UEs.</t>
            <t> When a packet from the UE leaves the gNB, it is SR-routed.
		This simplifies network slicing
		<xref target="I-D.hegdeppsenak-isis-sr-flex-algo"/>.</t>
            <t> In the uplink, the IPv6 DA BSID steers traffic
		into an SR policy when it arrives at the SRGW-UPF1.</t>
          </list></t>
          <t> An example topology is shown in
	      <xref target="fig_interworking_ipv6"/>. In this mode
	      the gNB is an unmodified gNB using IPv6/GTP. The UPFs are
	      SR-aware.  As before, the SRGW maps IPv6/GTP traffic to SRv6.</t> 
          <t> S1 and C1 are two service segments.
	      S1 represents a VNF in the network, and C1 represents a router
	      configured for Traffic Engineering.</t>
          <figure anchor="fig_interworking_ipv6"
		title="Enhanced mode with unchanged gNB IPv6/GTP behavior">
            <artwork align="center"><![CDATA[    
                               +----+
             IPv6/GTP         -| S1 |-                            ___
+--+  +-----+ [N3]           / +----+ \                          /   
|UE|--| gNB |-         SRv6 /   SRv6   \ +----+   +------+ [N6] /    
+--+  +-----+ \        [N9]/     VNF    -| C1 |---| UPF2 |------\  DN
        GTP    \ +------+ /              +----+   +------+       \___
                -| UPF1 |-                SRv6      SRv6
                 +------+                  TE       
                SR Gateway
                ]]></artwork>
          </figure>

          <section title="Packet flow - Uplink">
            <t>The uplink packet flow is as follows:</t>
            <figure>
              <artwork align="center"><![CDATA[
UE_out  : (A,Z)
gNB_out : (gNB, B)(GTP: TEID T)(A,Z)       -> Interface N3 unmodified
                                              (IPv6/GTP)
SRGW_out: (SRGW, S1)(U2::1, C1; SL=2)(A,Z) -> B is an End.M.GTP6.D
                                              SID at the SRGW
S1_out  : (SRGW, C1)(U2::1, C1; SL=1)(A,Z)
C1_out  : (SRGW, U2::1)(A,Z)               -> PSP
UPF2_out: (A,Z)                            -> End.DT4 or End.DT6 
              ]]></artwork>
            </figure>
            <t> The UE sends a packet destined to Z toward the gNB on a
	        specific bearer for that session. The gNB, which is unmodified,
	        encapsulates the packet into IPv6, UDP and GTP headers.
	        The IPv6 DA B, and the GTP TEID T are the ones received in the
	        N2 interface.</t>
            <t> The IPv6 address that was signalled over the N2 interface for
	        that UE session, B, is now the IPv6 DA. B is an SRv6 Binding
	        SID at the SRGW.  Hence the packet is routed to the SRGW.</t>
            <t> When the packet arrives at the SRGW, the SRGW identifies
	        B as an End.M.GTP6.D Binding SID
		(see <xref target="End-M-GTP6-D"/>).  Hence, the SRGW removes
	        the IPv6, UDP and GTP headers, and pushes an IPv6
	        header with its own SRH containing the SIDs bound to the
	        SR policy associated with this BindingSID.  There
	        is one instance of the End.M.GTP6.D SID per PDU type.</t>
            <t> S1 and C1 perform their related Endpoint functionality
	        and forward the packet.</t>
            <t> When the packet arrives at UPF2, the active segment is (U2::1)
	        which is bound to End.DT4/6.  UPF2 then decapsulates
		(removing the outer IPv6 header with all its extension headers)
		and forwards the packet toward the data network.</t>
          </section>	<!-- End section "Packet flow - Uplink" -->

          <section title="Packet flow - Downlink">
            <t>The downlink packet flow is as follows:</t>
            <figure>
              <artwork align="center"><![CDATA[
UPF2_in : (Z,A)                           -> UPF2 maps the flow with
                                             <C1, S1, SRGW::TEID,gNB>
UPF2_out: (U2::1, C1)(gNB, SRGW::TEID, S1; SL=3)(Z,A) -> T.Encaps.Red
C1_out  : (U2::1, S1)(gNB, S1; SL=2)(Z,A)
S1_out  : (U2::1, SRGW::TEID)(gNB, SRGW::TEID, S1, SL=1)(Z,A)
SRGW_out: (SRGW, gNB)(GTP: TEID=T)(Z,A)   -> SRGW/96 is End.M.GTP6.E
gNB_out : (Z,A)
              ]]></artwork>
            </figure>
            <t> When a packet destined to A arrives at the UPF2, the UPF2
		performs a lookup in the table associated to A and finds the
		SID list &lt;C1, S1, SRGW::TEID, gNB&gt;. The UPF2 performs
		a T.Encaps.Red operation, encapsulating the packet into
		a new IPv6 header with its corresponding SRH.</t>
            <t> C1 and S1 perform their related Endpoint processing.</t>
            <t> Once the packet arrives at the SRGW, the SRGW identifies the
		active SID as an End.M.GTP6.E function. The SRGW removes
		the IPv6 header and all its extensions headers. The SRGW
		generates new IPv6, UDP and GTP headers. The new IPv6 DA
		is the gNB which is the last SID in the received SRH.
		The TEID in the generated GTP header is an argument of the
		received End.M.GTP6.E SID. The SRGW pushes the headers to
		the packet and forwards the packet toward the gNB.  There
		is one instance of the End.M.GTP6.E SID per PDU type.</t>
            <t> Once the packet arrives at the gNB, the packet is a regular
		IPv6/GTP packet. The gNB looks for the specific radio bearer
		for that TEID and forward it on the bearer. This gNB behavior
		is not modified from current and previous generations.</t>
          </section>	<!-- End section "Packet flow - Downlink" -->

          <section title="Scalability">
            <t> For the downlink traffic, the SRGW is stateless. All the state
		is in the SRH inserted by the UPF2.  The UPF2 must have the UE
		states since it is the UE's session anchor point.</t>
            <t> For the uplink traffic, the state at the SRGW does not
		necessarily need to be unique per UE session; the state
		state can be shared among UEs.  This enables much more
		scalable SRGW deployments compared to a
		solution holding millions of states, one or more per UE.</t>
          </section>	<!-- End section "Scalability" -->

          <section title="IPv6 user-traffic">
            <t> For IPv6 user-traffic it is RECOMMENDED to perform
		encapsulation. However based on local policy, a service
		provider MAY choose to do SRH insertion. The main benefit
		is lower overhead.</t>
          </section>	<!-- End section "IPv6 user-traffic" -->
        </section>	<!-- End section "Interworking with IPv6 GTP" -->

        <section title="Interworking with IPv4 GTP">
          <t> In this interworking mode the gNB uses GTP
		over IPv4 in the N3 interface</t>
          <t> Key points:
          <list style='symbols'>
            <t> The gNB is unchanged and encapsulates packets into GTP
		(the N3 interface is not modified).</t>
            <t> In the uplink, traffic is classified by SRGW's
		Uplink Classifier and steered into an SR policy.
		The SRGW is a UPF1 functionality and can coexist
		with UPF1's Uplink Classifier functionality.</t>
            <t> SRGW removes GTP, finds the SID list related to DA, and adds
		a SRH with the SID list.</t>
          </list></t>

          <t> An example topology is shown in
		<xref target="fig_interworking_ipv4"/>. In this mode
		the gNB is an unmodified gNB using IPv4/GTP.
		The UPFs are SR-aware.  As before, the SRGW maps the
		IPv4/GTP traffic to SRv6.</t> 
          <t> S1 and C1 are two service segment endpoints.
		S1 represents a VNF in the network, and C1 represents a router
		configured for Traffic Engineering.</t>

          <figure anchor="fig_interworking_ipv4"
		title="Enhanced mode with unchanged gNB IPv4/GTP behavior">
            <artwork align="center"><![CDATA[    
                               +----+
             IPv4/GTP         -| S1 |-                            ___
+--+  +-----+ [N3]           / +----+ \                          /   
|UE|--| gNB |-         SRv6 /   SRv6   \ +----+   +------+ [N6] /    
+--+  +-----+ \        [N9]/     VNF    -| C1 |---| UPF2 |------\  DN
        GTP    \ +------+ /              +----+   +------+       \___
                -| UPF1 |-                SRv6      SRv6
                 +------+                  TE       
                SR Gateway
                ]]></artwork>
          </figure>

          <section title="Packet flow - Uplink">
            <t>The uplink packet flow is as follows:</t>             
            <figure>
              <artwork align="center"><![CDATA[
gNB_out : (gNB, B)(GTP: TEID T)(A,Z)          -> Interface N3
                                                 unchanged IPv4/GTP
SRGW_out: (SRGW, S1)(U2::1, C1; SL=2)(A,Z)    -> T.M.GTP4.D function
S1_out  : (SRGW, C1)(U2::1, C1; SL=1)(A,Z)
C1_out  : (SRGW, U2::1) (A,Z)                 -> PSP
UPF2_out: (A,Z)                               -> End.DT4 or End.DT6
              ]]></artwork>
            </figure>
            <t> The UE sends a packet destined to Z toward the gNB on a
		specific bearer for that session. The gNB, which is unmodified,
		encapsulates the packet into a new IPv4, UDP and GTP headers.
		The IPv4 DA, B, and the GTP TEID are the ones received at the
		N2 interface.</t>
            <t> When the packet arrives at the SRGW for UPF1, the SRGW has an
		Uplink Classifier rule for incoming traffic from the
		gNB, that steers the traffic into an SR policy by using the
    function T.M.GTP4.D. The SRGW removes the IPv4, UDP and GTP
		headers and pushes an IPv6 header with its own SRH containing
		the SIDs related to the SR policy associated with this traffic.
		The SRGW forwards according to the new IPv6 DA.</t>
            <t> S1 and C1 perform their related Endpoint
		functionality and forward the packet.</t>
            <t> When the packet arrives at UPF2, the active segment is (U2::1)
		which is bound to End.DT4/6 which performs the decapsulation
		(removing the outer IPv6 header with all its extension headers)
		and forwards toward the data network.</t>
          </section>	<!-- End section "Packet flow - Uplink" -->

          <section title="Packet flow - Downlink">
            <t>The downlink packet flow is as follows:</t>
            <figure>
              <artwork align="center"><![CDATA[
UPF2_in : (Z,A)                            -> UPF2 maps flow with SID
                                            <C1, S1,SRGW::SA:DA:TEID>
UPF2_out: (U2::1, C1)(SRGW::SA:DA:TEID, S1; SL=2)(Z,A) ->T.Encaps.Red
C1_out  : (U2::1, S1)(SRGW::SA:DA:TEID, S1; SL=1)(Z,A)
S1_out  : (U2::1, SRGW::SA:DA:TEID)(Z,A)
SRGW_out: (SA, DA)(GTP: TEID=T)(Z,A)       -> End.M.GTP4.E
gNB_out : (Z,A)
              ]]></artwork>
            </figure>
            <t>When a packet destined to A arrives at the UPF2, the UPF2
		performs a lookup in the table associated to A and finds the
		SID list &lt;C1, S1, SRGW::SA:DA:TEID&gt;. The UPF2 performs
		a T.Encaps.Red operation, encapsulating the packet into
		a new IPv6 header with its corresponding SRH.</t>
            <t>The nodes C1 and S1 perform their related Endpoint
		processing.</t>
            <t>Once the packet arrives at the SRGW, the SRGW identifies the
		active SID as an End.M.GTP4.E function. The SRGW removes
		the IPv6 header and all its extensions headers. The SRGW
		generates an IPv4, UDP and GTP headers. The IPv4 SA and
		DA are received as SID arguments.
		The TEID in the generated GTP header is also the arguments
		of the received End.M.GTP4.E SID.  The SRGW pushes the headers
		to the packet and forwards the packet toward the gNB.</t>
            <t> When the packet arrives at the gNB, the packet is a regular
		IPv4/GTP packet. The gNB looks for the specific radio bearer
		for that TEID and forward it on the bearer. This gNB behavior
		is not modified from current and previous generations.</t>
          </section>	<!-- End section "Packet flow - Downlink" -->

          <section title="Scalability">
            <t>For the downlink traffic, the SRGW is stateless. All the
		state is in the SRH inserted by the UPF. The UPF must have
		this UE-base state anyway (since it is its anchor point).</t>
            <t>For the uplink traffic, the state at the SRGW is dedicated on a
		per UE/session basis according to an Uplink Classifier.
		There is state for steering the different sessions on a SR
		policies.  However, SR policies are shared
		among several UE/sessions.</t>
          </section>	<!-- End section "Scalability" -->

          <section title="IPv6 user-traffic">
            <t>For IPv6 user-traffic it is RECOMMENDED to perform
		encapsulation.  Based on local policy, a service
		provider MAY choose to do SRH insertion. The main benefit
		is a lower overhead.</t>
          </section>	<!-- End section "IPv6 user-traffic" -->
        </section>	<!-- End section "Interworking with IPv4 GTP" -->

        <section title="Extensions to the interworking mechanisms">
          <t>In this section we presented two mechanisms for interworking
	      with gNBs that do not support SRv6. These mechanism are done
	      to support GTP over IPv4 and GTP over IPv6.</t>
          <t>Even though we have presented these methods as an extension to
	      the "Enhanced mode", it is straightforward in its
	      applicability to the "Traditional mode".</t>
          <t>Furthermore, although these mechanisms are designed for
	      interworking with legacy RAN at the N3 interface, these methods
	      could also be applied for interworking with a non-SRv6 capable
	      UPF at the N9 interface (e.g. L3-anchor is SRv6 capable but
	      L2-anchor is not).</t>
        </section> <!-- End section "Extensions .. interworking mechanisms" -->
      </section>  <!-- End "Enhanced mode with unchanged gNB GTP ..." -->
    </section>	<!-- End section "User-plane behaviors" -->

    <section anchor="srv6_functions" title="SRv6 SID Mobility Functions">
      <!-- Add text on functions used on UPF1, UPF2,... -->
      <section anchor="arguments-for-mobility" title="Args.Mob.Session">
        <t>Args.Mob.Session provide per-session information for charging, buffering and 
          lawful intercept (among others) required by some mobile nodes. 
          The Args.Mob.Session argument format is used in combination with End.Map,
          End.DT and End.DX functions. Note that proposed format is applicable for 
          5G networks, while similar formats could be proposed for legacy networks.
        <figure title="Args.Mob.Session format">
          <artwork align="center"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   QFI     |R|U|                PDU Session ID                 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|PDU Sess(cont')|
+-+-+-+-+-+-+-+-+
          ]]></artwork>
        </figure>
        <list style="symbols">
          <t> QFI: QoS Flow Identifier <xref target="TS.38415"/></t>

          <t> R: Reflective QoS Indication  <xref target="TS.23501"/>.
          This parameter indicates the activaton of reflective QoS towards the UE for the transfered packet. Reflective QoS enables the UE to map UL User Plane traffic to QoS Flows without SMF provided QoS rules.</t>

          <t>U: Unused and for future use. MUST be 0 on transmission and
              ignored on receipt.</t>

          <t>PDU Session ID: Identifier of PDU Session. The GTP-U equivalent is TEID.</t>
        </list>
      </t>
      <t>Since the SRv6 function is likely NOT to be instantiated per PDU session, Args.Mob.Session helps the UPF to perform the functions which require per QFI and/or per PDU Session granularity.</t>
      </section>
      
      <section anchor="end-map-function" title="End.MAP">
        <t>The "Endpoint function with SID mapping" function (End.MAP for
	    short) is used in several scenarios. Particularly in mobility,
      End.MAP is used in the UPFs for the PDU Session anchor functionality.</t>

        <t>When a SR node N receives a packet destined to S and S is a local
      End.MAP SID, N does the following:</t>

        <figure><artwork align="left"><![CDATA[
1.    look up the IPv6 DA in the mapping table 
2.    update the IPv6 DA with the new mapped SID            ;; Note 1
3.    IF segment_list > 1
4.       insert a new SRH
5.    forward according to the new mapped SID
6. ELSE                                          
7.    Drop the packet                            
          ]]></artwork></figure>

        <t>Note 1: The SID in the SRH is NOT modified.</t>
      </section>	<!-- End section "End.MAP" -->

      <section anchor="End-M-GTP6-D" title="End.M.GTP6.D">
        <t>The "Endpoint function with IPv6/GTP decapsulation into SR policy"
	    function (End.M.GTP6.D for short) is used in interworking scenario
	    for the uplink toward from the legacy gNB using IPv6/GTP.
	    Suppose, for example, this SID is associated with an SR
	    policy &lt;S1, S2, S3&gt;
	    and an IPv6 Source Address A.</t>
        <t>When the SR Gateway node N receives a packet destined to S and
	    S is a local End.M.GTP6.D SID, N does:</t>

        <figure><artwork align="left"><![CDATA[
1. IF NH=UDP & UDP_PORT = GTP THEN            
2.    pop the IPv6, UDP and GTP headers
3.    push a new IPv6 header with its own SRH <S2, S3>
4.    set the outer IPv6 SA to A
5.    set the outer IPv6 DA to S1
6.    forward according to the S1 segment of the SRv6 Policy
7. ELSE                                          
8.    Drop the packet                            
          ]]></artwork></figure>
      </section>	<!-- End section "End.M.GTP6.D" -->

      <section title="End.M.GTP6.E">
        <t>The "Endpoint function with encapsulation for IPv6/GTP tunnel"
	    function (End.M.GTP6.E for short) is used in interworking scenario
	    for the downlink toward the legacy gNB using IPv6/GTP.</t>

        <t>The End.M.GTP6.E function MUST contain the Arg.Mob.Session argument space which is used
          to provide the session identifiers.</t>
    
        <t>When the SR Gateway node N receives a packet destined to S, and S
	    is a local End.M.GTP6.E SID, N does the following:</t>

        <figure><artwork align="left"><![CDATA[
 1. IF NH=SRH & SL = 1  THEN                                ;; Note 1
 2.    decrement SL                               
 3.    store SRH[SL] in variable new_DA
 4.    store TEID in variable new_TEID                      ;; Note 2
 5.    pop IP header and all its extension headers   
 6.    push new IPv6 header and GTP-U header
 7.    set IPv6 DA to new_DA
 8.    set GTP_TEID to new_TEID
 9.    lookup the new_DA and forward the packet accordingly
10. ELSE                                          
11.    Drop the packet                            
          ]]></artwork></figure>

        <t>Note 1: An End.M.GTP6.E SID MUST always be the penultimate SID.</t>
        <t>Note 2: TEID is extracted from the argument space of the current
	    SID.</t>
      </section>	<!-- End section "End.M.GTP6.E" -->

      <section title="End.M.GTP4.E">
        <t>The "Endpoint function with encapsulation for IPv4/GTP tunnel"
	    function (End.M.GTP4.E for short) is used in the downlink when
	    doing interworking with legacy gNB using IPv4/GTP.</t>
    
        <t>When the SR Gateway node N receives a packet destined to S and S
	    is a local End.M.GTP4.E SID, N does:</t>

        <figure><artwork align="left"><![CDATA[
1. IF NH=SRH and SL > 0 THEN                   
2.    Drop the packet
3. ELSE                                          
4.    store IPv6 DA in buffer S
5.    store IPv6 SA in buffer S'
6.    pop the IPv6 header and its extension headers
7.    push UDP/GTP headers with GTP TEID from S
8.    push outer IPv4 header with SA, DA from S' and S                           
          ]]></artwork></figure>

        <t>S has the following format:</t>
        <figure title="End.M.GTP4.E SID Encoding">
          <artwork align="center"><![CDATA[
0                                                         127
+-----------------------+-------+----------------+---------+
|  SRGW-IPv6-LOC-FUNC   |IPv4DA |Args.Mob.Session|0 Padded |
+-----------------------+-------+----------------+---------+
       128-a-b-c            a            b           c

          ]]></artwork>
        </figure>   
        
        <t>S' has the following format:</t>
        <figure title="IPv6 SA Encoding for End.M.GTP4.E">
          <artwork align="center"><![CDATA[
0                                                         127
+----------------------+--------+--------------------------+
|  Source UPF Prefix   |IPv4 SA | any bit pattern(ignored) |
+----------------------+--------+--------------------------+
         128-a-b            a                  b        

          ]]></artwork>
        </figure>   
      </section>	<!-- End section "End.M.GTP4.E" -->
            
      <section title="T.M.GTP4.D">
        <t>The "Transit with tunnel decapsulation and map to an SRv6 policy"
	    function (T.M.GTP4.D for short) is used in the direction from legacy
	    user-plane to SRv6 user-plane network.</t>

        <t>When the SR Gateway node N receives a packet destined to a
	    IW-IPv4-Prefix, N does:</t>

        <figure><artwork align="left"><![CDATA[
1. IF Payload == UDP/GTP THEN
2.    pop the outer IPv4 header and UDP/GTP headers                   
3.    copy IPv4 DA, SA, TUN-ID to form SID B   
4.    encapsulate the packet into a new IPv6 header   ;;Ref1
5.    set the IPv6 DA = B                           
6.    forward along the shortest path to B                       
7. ELSE                                                              
8.    Drop the packet                                                
          ]]></artwork></figure>
        <t>Ref1: The NH value is identified by inspecting the first nibble of the inner payload.</t>
        <t>The SID B has the following format:</t>
        <figure title="T.M.GTP4.D SID Encoding">
          <artwork align="center"><![CDATA[
+0                                                         127
++-----------------------+-------+----------------+---------+
+|Destination UPF Prefix |IPv4DA |Args.Mob.Session|0 Padded |
++-----------------------+-------+----------------+---------+
+       128-a-b-c            a            b           c
+
          ]]></artwork>
        </figure>

        <t> The SID B is an SRv6 BindingSID
	    instantiated at the first UPF (U1). A static format
	    is used for this Binding SIDs in order to
	    remove state from the SRGW.</t>
      </section>	<!-- End section "T.M.Tmap" -->

      <section title="End.Limit: Rate Limiting function">
        <t> The mobile user-plane requires a rate-limit feature. For this 
          purpose, we define a new function "End.Limit".
          The "End.Limit" function encodes in its arguments the 
          rate limiting parameter that should be applied to this packet.
          Multiple flows of packets should have the same group identifier
           in the SID when those flows are in an same AMBR group.
          The encoding format of the rate limit
	    segment SID is as follows:</t>
        <figure title="End.Limit: Rate limiting function argument format">
          <artwork align="center"><![CDATA[
+----------------------+----------+-----------+
| LOC+FUNC rate-limit  | group-id | limit-rate|
+----------------------+----------+-----------+
      128-i-j                i          j
              ]]></artwork>
        </figure>
        <t> If the limit-rate bits are set to zero, the node should
            not do rate limiting unless static configuration or
            control-plane sets the limit rate associated to the SID.</t>
      </section>    <!-- End section "End.Limit: Rate Limiting function" -->
    </section>	<!-- End section "" -->


    <section anchor="pdu_sessions"
		title="SRv6 supported 3GPP PDU session types">
      <t>The 3GPP <xref target="TS.23501"/> defines the following PDU session
		types:
      <list style='symbols'>
        <t>IPv4</t>
        <t>IPv6</t>
        <t>IPv4v6</t>
        <t>Ethernet</t>
        <t>Unstructured</t>
      </list></t>
      <t> SRv6 supports all the 3GPP PDU session types without any protocol
	    overhead by using the corresponding SRv6 functions (End.DX4,
	    End.DT4 for IPv4 PDU sessions; End.DX6, End.DT6, End.T for IPv6
	    PDU sessions; End.DT46 for IPv4v6 PDU sessions; End.DX2 
	    for L2 PDU sessions; End.DX2 for Unstructured PDU sessions).</t>
    </section>	<!-- End section "SRv6 supported PDU session types" -->

    <section anchor="netslice" title="Network Slicing Considerations">
        <t>A mobile network may be required to implement "network slices",
	    which logically separate network resources. User-plane functions
	    represented as SRv6 segments would be part of a slice.</t>
        
        <t><xref target="I-D.ietf-spring-segment-routing-policy" />
	    describes a solution to build basic network slices with SR.
	    Depending on the requirements, these slices can be further
	    refined by adopting the mechanisms from:
          <list style="symbols">
            <t>IGP Flex-Algo
		<xref target="I-D.hegdeppsenak-isis-sr-flex-algo"/></t>
            <t>Inter-Domain policies
	       <xref target="I-D.ietf-spring-segment-routing-central-epe"/></t>
          </list></t>
        
        <t>Furthermore, these can be combined with ODN/AS
	    <xref target="I-D.ietf-spring-segment-routing-policy"/> for
	    automated slice provisioning and traffic steering.</t>

        <t>Further details on how these tools can be used to create
          end to end network slices are documented in 
          <xref target="I-D.ali-spring-network-slicing-building-blocks"/>.</t>
    </section>	<!-- End section "Network Slicing Considerations" -->

    <section anchor="c-plane" title="Control Plane Considerations">
        <t>This document focuses on user-plane behavior and its
	    independence from the control plane.</t>

        <t>The control plane could be the current 3GPP-defined control plane
	    with slight modifications to the N4 interface
	    <xref target="TS.29244"/>.</t>

        <t>Alternatively, SRv6 could be used in conjunction with a new
	    mobility control plane as described in LISP 
	    <xref target="I-D.rodrigueznatal-lisp-srv6" />, hICN
	    <xref target="I-D.auge-dmm-hicn-mobility-deployment-options"/>,
	    MFA <xref target="I-D.gundavelli-dmm-mfa"/> or in conjunction
	    with FPC <xref target="I-D.ietf-dmm-fpc-cpdp"/>. The analysis
	    of new mobility control-planes and its applicability to SRv6 is
	    out of the scope of this document.</t>

        <t> <xref target="IANA"/> allocates SRv6
	    endpoint function types for the new functions defined in this
	    document.  Control-plane protocols are expected to use
	    these function type codes to signal each function.</t>

        <t> SRv6's network programming nature allows a
	    flexible and dynamic UPF placement.</t>
    </section>	<!-- End section "Control Plane Considerations" -->

    <section title="Security Considerations">
        <t>TBD</t>
    </section>	<!-- End section "Security Considerations" -->

    <section anchor="IANA" title="IANA Considerations">
      <t> IANA is requested to allocate, within the "SRv6 Endpoint Types"
	  sub-registry belonging to the top-level
	  "Segment-routing with IPv6 dataplane (SRv6) Parameters" registry
	  <xref target="I-D.ietf-spring-srv6-network-programming"/>,
	  the following values:</t>

      <texttable anchor="endpoint_opcodes"
			title="SRv6 Mobile User-plane Endpoint Types">
          <ttcol align="left">Value/Range</ttcol>
          <ttcol align="center">Hex</ttcol>
          <ttcol align="center">Endpoint function</ttcol>
          <ttcol align="center">Reference</ttcol>
          
          <c>TBA</c>
          <c>TBA</c>
          <c>End.MAP</c>
          <c>[This.ID]</c>  

          <c>TBA</c>
          <c>TBA</c>
          <c>End.M.GTP6.D</c>
          <c>[This.ID]</c>

          <c>TBA</c>
          <c>TBA</c>
          <c>End.M.GTP6.E</c>
          <c>[This.ID]</c>

          <c>TBA</c>
          <c>TBA</c>
          <c>End.M.GTP4.E</c>
          <c>[This.ID]</c>

          <c>TBA</c>
          <c>TBA</c>
          <c>End.Limit</c>
          <c>[This.ID]</c>
      </texttable>
    </section>	<!-- End section "IANA Considerations" -->

    <section anchor="acknowledge" title="Acknowledgements">
      <t>The authors would like to thank Daisuke Yokota, Bart Peirens,
	  Ryokichi Onishi, Kentaro Ebisawa, Peter Bosch, Darren Dukes,
	  Francois Clad, Sri Gundavelli, Sridhar Bhaskaran, Arashmid Akhavain, 
    Ravi Shekhar and Aeneas Dodd-Noble for their useful comments of 
    this work.</t>
    </section>	<!-- End section "Acknowledgements" -->

    <section title="Contributors">
      <t>Kentaro Ebisawa<vspace blankLines="0" />
      Toyota Motor Corporation<vspace blankLines="0" />
      Japan</t>
      <t>Email: ebisawa@toyota-tokyo.tech<vspace blankLines="0" /></t>
    </section>	<!-- End section "Contributors" -->

  </middle>

  <back>
    <references title="Normative References">
        &rfc2119;
        &rfc8402;
        &I-D.ietf-spring-srv6-network-programming;
        &I-D.ietf-spring-segment-routing-policy;
        &I-D.ietf-6man-segment-routing-header;
    </references>

    <references title="Informative References">
        &I-D.ietf-dmm-fpc-cpdp;
        &I-D.hegdeppsenak-isis-sr-flex-algo;
        &I-D.gundavelli-dmm-mfa;
        &I-D.ietf-spring-segment-routing-central-epe;
        &I-D.xuclad-spring-sr-service-programming;
        &I-D.auge-dmm-hicn-mobility-deployment-options;
        &I-D.camarillo-dmm-srv6-mobile-pocs;
        &I-D.rodrigueznatal-lisp-srv6;
        &I-D.camarilloelmalky-springdmm-srv6-mob-usecases;
        &I-D.ali-spring-network-slicing-building-blocks;
        <reference anchor="TS.23501">
            <front>
                <title>System Architecture for the 5G System</title>
                <author surname="3GPP" fullname="3GPP">
                </author>
                <date month="November" year="2017" />
            </front>
            <seriesInfo name="3GPP TS 23.501" value="15.0.0" />
        </reference>
        <reference anchor="TS.29244">
            <front>
                <title>Interface between the Control Plane
                and the User Plane Nodes</title>
                <author surname="3GPP" fullname="3GPP">
                </author>
                <date month="December" year="2017" />
            </front>
            <seriesInfo name="3GPP TS 29.244" value="15.0.0" />
        </reference>
        <reference anchor="TS.29281">
            <front>
                <title>General Packet Radio System (GPRS) Tunnelling Protocol User Plane (GTPv1-U)</title>
                <author surname="3GPP" fullname="3GPP">
                </author>
                <date month="December" year="2017" />
            </front>
            <seriesInfo name="3GPP TS 29.281" value="15.1.0" />
        </reference>

        <reference anchor="TS.38415">
            <front>
                <title>Draft Specification for 5GS container (TS 38.415)</title>
                <author surname="3GPP" fullname="3GPP">
                </author>
                <date month="August" year="2017" />
            </front>
            <seriesInfo name="3GPP R3-174510" value="0.0.0" />
        </reference>       
    </references>

    <section anchor="Implementations" title="Implementations">
      <t> This document introduces new SRv6 functions. These functions have an
	  open-source P4 implementation available in
	  <eref target="https://github.com/ebiken/p4srv6" />.</t>
      <t>There are also implementations in M-CORD NGIC and Open Air Interface (OAI). Further details can be found in <xref target="I-D.camarillo-dmm-srv6-mobile-pocs"/>.</t>
    </section>	<!-- End section "Implementations" -->

    <section title="Changes from revision 02 to revision 03"
	anchor="changes_02_03">

    <t>
      This section lists the changes between draft-ietf-dmm-srv6-mobile-uplane
	revisions ...-02 and ...-03.
    <list style="symbols">
        <t>Added new terminology section for abbreviations.</t>
        <t>Added new terminology section for predefined SRv6 functions.</t>
        <t>Made terminology section for conventions used in the document.</t>
        <t>Renamed "Basic" mode to be called "Traditional" mode.</t>
        <t>Renamed "Aggregate" mode to be called "Enhanced" mode.</t>
        <t>Added new Args.Mob.Session format to supply QFI, RQI indication and PDU Session ID.</t>
        <t>Modified End.MAP function to define the SID argument format and support more than one SID</t>
        <t>Added missing references.</t>
        <t>Editorial updates to improve readability.</t>
      </list></t>
    </section><!-- End of section "Changes from revision 02 to revision 03" -->
  </back>
</rfc>
